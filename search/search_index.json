{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Course overview","text":"<p>For the requirements, please visit the official data sheet.</p> <p>For the schedule of the course and the deadlines for submission, please refer to the course site in Moodle.</p>"},{"location":"#submitting-the-solutions","title":"Submitting the solutions","text":"<p>Each lab must be submitted in a personal git repository. Please refer to the detailed guideline here. You must carefully study these guidelines!</p> <p>IMPORTANT</p> <p>The submissions of the lab exercises must follow these guidelines. Submissions not following these guidelines are not graded.</p> <p>Workflow errors, i.e., not following the guidelines (e.g., not assigning the right person or not assigning at all, are penalized.</p>"},{"location":"#screenshots","title":"Screenshots","text":"<p>Some of the exercises require you to create a screenshot. This screenshot is proof of the completion of the exercise. The expected content of these screenshots is detailed in the exercise description.  The screenshot may include the entire desktop or just the required portion of the screen.</p> <p>You must submit the screenshots as part of the solution code, uploaded to the git repository. The repositories are private; only you and the instructions can access them. If there is any content on the screenshot that is not relevant to the exercise and you would like to remove it, you can obscure these parts.</p>"},{"location":"#grading","title":"Grading","text":"<p>Each laboratory is graded on a 1-5 scale. You must submit each lab by the deadline. The laboratory grade is calculated based on the 20+3 points you can earn in each lab as follows:</p> <ul> <li>0-7.5 point: failed</li> <li>8-10.5 point: pass</li> <li>11-13.5 point: satisfactory</li> <li>14-16.5 point: good</li> <li>17-20+ points: very good</li> </ul> <p>The extra +3 points are optional; if you do them, it is added to the points. In the automated evaluation, these extra 3 points will appear as \"imsc\"; please ignore this (that is for the Hungarian students).</p> <p>The final grade will be the mathematically correct average of the individual (1-5 scale) grades. If you do not attend a lab or do not submit it until the deadline, it will be counted as grade 1 in the average.</p> <p>Some of the exercises are evaluated automatically. Your code will be executed; therefore, you must follow the exercise descriptions precisely (e.g., use the provided code skeleton, change only the allowed parts of the code, etc.).</p> <p>You will receive a preliminary result about your submission in GitHub; see in the guideline here). If there are some issues you need to diagnose, the entire log of the execution is available for you on the GitHub Actions web page. A short introduction is provided here.</p>"},{"location":"#our-expectations-regarding-the-labs","title":"Our expectations regarding the labs","text":"<p>Where should I upload the solution? See above.</p> <p>Individual work at home? Since your work is graded, you are expected to submit your own solution. This does not mean that you cannot ask or give help to others. But it prohibits submitting a work created by someone else. This is the reason we ask for screenshots: these verify the process of completing the exercises.</p> <p>Submitting the work of someone else: Refer to the Ethical codex and the Code of Studies.</p> <p>One lab is just 4 hours, right? No. This course is 3 credits, which (officially) translates to approx. 90 hours of work invested throughout the semester. The lab is not just the 4 hours you spend with the instructor; it also involves preliminary preparation and finishing/completing the tasks at home.</p> <p>My code contains a small typo, and I received no grade. You are expected to write code that works! You are completing the exercises in front of a computer, so you have everything you need to check yourself. Your code must compile and must run. If the behavior is not entirely correct, that is accepted. But if it does not even compile, it will not be graded.</p> <p>Just imagine what would happen if you committed code that does not compile at your workplace?</p> <p>If I am working at home, how do I get help? Talk to your lab instructor.</p> <p>The instructor does not help. Why? You might not be given the right solution if you face a problem. But this does not mean you get no help. You are encouraged to investigate your problems, search for solutions, and ask specific issues. You must demonstrate that you are a professional!</p> <p>How should I ask questions then? In short: https://stackoverflow.com/help/how-to-ask. In more detail: If you are stuck, first, make an effort to understand your problem. The problem is not that \"it does not work\" or \"I don't know how to do it.\" You can ask good questions once you understand the problem and have tested some solutions already.</p> <p>So the answer is Google and StackOverflow? No. Everything you need here, you should already know. Google is an excellent tool, and StackOverflow is even better. However... You also need to understand the answer you find here. The answer you find here might be a solution to some problem, but not necessarily your issue.</p> <p>All these deadlines and rules! A software developer, better yet, an engineer, must be prepared to write code and work within the scope of prescribed rules. The world is complex, and complexity is often managed with rules. If you have some time, check what Robert C. Martin (Bob Martin, \"Uncle Bob\") has to say about the origins of the software developer profession: https://www.youtube.com/watch?v=ecIWPzGEbFc</p> <p>Pull requests welcome</p> <p>As a student of this course, you can earn extra credit by contributing to the materials! Open a pull request to fix an error or contribute to the contents in any way! Check the link to the repository in the upper right corner.</p> <p>License</p> <p>The materials provided here are created for the students of course BMEVIAUAC09. The usage of these materials outside the scope of teaching or learning this particular course is only granted if the source and authors are contributed.</p> <p>These materials are to be viewed within the context of the course. For any other usage scenarios, the material is provided as-is.</p>"},{"location":"GitHub-Actions/","title":"Using GitHub Actions","text":"<p>The semi-automatic evaluation of the exercises is based on GitHub Actions. It is a CI system capable of running jobs on git repositories. We use this system, for example, to compile your code and test it.</p> <p>You will receive a notification about the results in a pull request. But if you need more details, such as checking the application logs, you can access these using the GitHub web interface under Actions.</p> <p></p> <p>Here, you will see a list of Workflows.</p> <p></p> <p>By selecting one (e.g., the last one is always at the top of the list), you see this workflow's details. To get to the logs, you need to click once more on the left. The log will be on the right side.</p> <p></p> <p>Each green checkmark is a successful step. These steps do not correspond to your exercises; these describe the evaluation process. These steps include preparations, such as setting up the .NET environment for compiling your code (since each workflow starts in a clean environment, these steps are performed each time).</p> <p>Most of these steps should be successful, even if your submission contains an error. The two exceptions when these tasks might fail due to your changes are: (1) if <code>neptun.txt</code> is missing, or (2) your C# code does not compile. The <code>neptun.txt</code> is mandatory, and no evaluation is performed until that is provided. The C# compilation is a step that must succeed; otherwise, your application cannot be started.</p> <p>There might be transient errors in these workflows. An example is when a download, such as the download of the .NET environment fails. The workflow execution can be repeated if this occurs. Retrying the execution may only help if the problem is indeed transient; a retry will not resolve a C# compilation error. (You can deduce the cause from the name of the step and the error message.)</p> <p></p> <p>You might also be able to access the application logs. E.g., when testing a .NET application, it is started, and the logs will be printed here.</p> <p>The image below shows the initialization of an Entity Framework application, where you can also see the translated and executed SQL commands. (You would see the same in Visual Studio Output while debugging.) The content here, obviously, depends on the actual exercise.</p> <p></p>"},{"location":"GitHub-credentials/","title":"In university laboratories: GitHub access","text":"<p>The computers may remember the GitHub credentials. You should delete this at the end of the lab.</p> <ol> <li>Open <code>Credential Manager</code> from the Start menu.</li> <li>On the page <code>Windows Credentials</code> find the entry for GitHub and delete it.    </li> </ol>"},{"location":"GitHub/","title":"Submitting your work (GitHub)","text":"<p>We are using GitHub to submit the solutions. Each laboratory is submitted in a GitHub repository that you will create through a provided link. The solution of the laboratory exercises is created within these repositories, then committed and pushed to GitHub. The submission is finished with a pull request assigned to the laboratory instructor with GitHub name <code>mradazzouz</code>.</p> <p>IMPORTANT</p> <p>The submission requirements detailed below are mandatory. Submissions not following these guidelines are not graded.</p>"},{"location":"GitHub/#short-version-aka-tldr","title":"Short version, aka. TL;DR","text":"<p>The detailed description below shows the entire procedure. This summary is an overview of the whole process.</p> <ol> <li> <p>The lab exercises are solved in a dedicated GitHub repository created using a GitHub Classroom invitation link published in Moodle.</p> </li> <li> <p>Your solution is submitted on a new branch, not on master. You can create any number of commits on this branch. You need to push these commits to GitHub.</p> </li> <li> <p>You submit your final solution through a pull request assigned to the laboratory instructor.</p> </li> <li> <p>You can ask questions regarding the results and evaluation in the pull request comment thread. To notify your instructor use the <code>@name</code> annotation in the comment text.</p> </li> </ol>"},{"location":"GitHub/#starting-your-work-git-checkout","title":"Starting your work: git checkout","text":"<ol> <li> <p>Register a GitHub account if you don't have one yet.</p> </li> <li> <p>Open the course page in Moodle and find the invitation URL. This link is different for each lab; make sure to use the right one.</p> </li> <li> <p>If needed, authorize the GitHub Classroom application to use your account data. (This page will be displayed the first time you click the link in the previous step.)</p> <p></p> </li> <li> <p>You will see a page where you can \"Accept the ... assignment\". Click the button.</p> <p></p> </li> <li> <p>Wait for the repository creation to finish. You will get the repository URL here.</p> <p>Note</p> <p>The repository will be private. No one but you and the instructors will see it.</p> <p></p> </li> <li> <p>Open the repository webpage by following the link. You will need this URL, so remember it.</p> <p></p> </li> <li> <p>Clone your repository. You will need the repository git URL, which you can get from the repository webpage following the Clone or download button.</p> <p>You may use any git client. The simplest one is GitHub Desktop if you do not have a favorite yet. You can list your repositories in this application directly from GitHub.</p> <p></p> <p>If you are using the console or shell, the following command performs the clone (if the <code>git</code> command is available): <code>git clone &lt;repository link&gt;</code></p> </li> <li> <p>If the cloning is successful, DO NOT START WORKING YET! The solution should not be committed to the repository <code>master</code> branch. Instead, create a new branch with the name <code>solution</code>.</p> <p>In GitHub Desktop, use the Branch menu for creating a new one.</p> <p></p> <p>If using the console, use the following command: <code>git checkout -b solution</code></p> </li> <li> <p>Complete the exercises on this branch. You may have any number of commits and pushes.</p> <p>In university laboratories</p> <p>Before you make your first commit, check whether your name and email address are properly configured. You can check this using the following commands.</p> <pre><code>git config user.name\ngit config user.email\n</code></pre> <p>If the values are not correct, set your name and email address with the following commands executed in the repository directory. This will set the values for the repository. (It is recommended to set the email address to the one you use with GitHub.)</p> <pre><code>git config user.name \"John Doe\"\ngit config user.email \"john@doe.org\"\n</code></pre> <p>At home</p> <p>When working from home, you may want to set the name and email address globally using the <code>--global</code> switch in the commands above.</p> <p>To commit using GitHub Desktop, first check if you are on the correct branch. During the first push, the solution branch needs to be published.</p> <p></p> <p>When adding further commits, verify the branch. You can publish the commit using the Push origin button. The tiny number on this button shows you how many commits need pushing.</p> <p></p> <p>If you are using the console, use the following commands:</p> <pre><code># Check the current branch and the files modified\ngit status\n\n# Prepares all changes for commit\ngit add .\n\n# Commit\ngit commit -m \"f1\"\n\n# Push the new branch (first time)\ngit push --set-upstream origin solution\n\n# Push further commits\ngit push\n</code></pre> </li> </ol>"},{"location":"GitHub/#submitting-the-solution","title":"Submitting the solution","text":"<ol> <li> <p>When you are ready with the exercises, verify on the repository web page that you uploaded everything. You may need to switch branches.</p> <p></p> <p>GitHub web file upload</p> <p>We recommend that you do not use the GitHub web file upload. If something is missing, add it to your local repository and commit and push again.</p> </li> <li> <p>When you are truly ready, open a pull request.</p> <p>Why the pull request?</p> <p>This pull request combines all changes you made and shows us the final result. This helps the laboratory instructor to evaluate your submission more easily. This pull request means you submit your solution; hence this step cannot be omitted.</p> <p>To open the pull request, you need to go to the repository's GitHub web frontend. If you pushed recently, GitHub offers you to create the pull request.</p> <p></p> <p>You may also open the pull request from the menu at the top. It is important to specify the correct branches: <code>master</code> is the target into which <code>solution</code> is merged.</p> <p></p> <p>When the pull request is created, you will see a little number \"1\" on the Pull request menu showing you that there is one open item there. YOU ARE NOT FINISHED YET!</p> <p></p> </li> <li> <p>The pull request will trigger a preliminary evaluation. You will see the result of this evaluation as a comment added to the pull request thread.</p> <p>This will be different for each laboratory. You will see the result in a comment in the pull request thread.</p> <p></p> <p>If you need more information about the evaluation and the results, GitHub Actions can provide you more. A short introduction is provided here.</p> </li> <li> <p>If you are not satisfied with your work, you can make further changes. You only need to commit and push your changes. Any changes pushed will re-trigger the evaluation of the pull request. We ask that you trigger NO MORE THAN 5 evaluations!</p> <p>Making further changes without running the evaluation</p> <p>If you want to make changes to your submission and not have the re-evaluation run, you should convert the pull request to draft.</p> <p></p> <p>This state means work in progress. You can commit and push freely. These will not trigger any evaluation. Once ready, you must change the state back: go to the bottom of the PR and click \"Ready for review.\" This will set the PR back to its normal state and trigger an automated evaluation.</p> <p></p> <p>Maximum 5</p> <p>Evaluations that fail due to transient errors, such as network problems, are not counted into the 5 evaluations. But if you trigger more evaluation by mistake or on purpose, it will be sanctioned. You are required to test your solution locally before submitting it.</p> </li> <li> <p>FINALLY, when you are ready, assign the pull request to your laboratory instructor. This step is considered as the submission of your work.</p> <p></p> <p>Without pull request</p> <p>If you have no pull request, or it is not assigned to the instructor, we consider it work in progress and not submitted.</p> <p>Done</p> <p>Now you are ready. After assigning the pull request, make no further changes. The instructor will evaluate the submission and close the pull request.</p> </li> </ol>"},{"location":"GitHub/#questions-and-complaints-regarding-the-final-result","title":"Questions and complaints regarding the final result","text":"<p>If you have questions or concerns regarding the automated evaluation, use the pull request for communication with the instructor by asking questions via comments. To let the instructor know you have questions, please use <code>@mradazzouz</code> mention in the PR comment. This will automatically send an email notification.</p> <p></p> <p>Please provide proof</p> <p>Please note that if you think the evaluation made a mistake, you must support your question/complaint with proof (e.g., show how you tested your solution and prove that it worked).</p>"},{"location":"VisualStudio/","title":"Install Visual Studio &amp; .NET Core SDK","text":"<p>In some of the exercises require Microsoft Visual Studio version 2019 16.6 or newer. With the exception of one topic, VS version 2022 is fine too. The free Community edition is sufficient for solving these exercises.</p> <p>You can check the version by starting the Visual Studio Installer:</p> <p></p> <p>VS Code</p> <p>The exercises can also be solved using the platform-independent Visual Studio Code. The skeletons of the exercises are prepared for Visual Studio. If you are working with VS Code, you need to configure your environment.</p>"},{"location":"VisualStudio/#visual-studio-workloads","title":"Visual Studio workloads","text":"<p>When installing Visual Studio, the following workloads have to be selected:</p> <ul> <li>ASP.NET and web development</li> <li>.NET Core cross-platform development</li> </ul> <p></p> <p>An existing installation can be modified using the Visual Studio Installer.</p> <p></p>"},{"location":"VisualStudio/#check-and-install-net-core-sdk","title":"Check and install .NET Core SDK","text":"<p>Visual Studio might install certain versions of the .NET Core SDK. To check if you have the right version, use the <code>dotnet</code> CLI: in a console, execute the <code>dotnet --list-sdks</code> command. This command works on Linux and Mac too. It will print something similar:</p> <pre><code>C:\\&gt;dotnet --list-sdks\n3.1.404 [C:\\Program Files\\dotnet\\sdk]\n5.0.101 [C:\\Program Files\\dotnet\\sdk]\n</code></pre> <p>If you see version 3.1 in this list, then you are good to go. Otherwise, install the SDK from here.</p>"},{"location":"Lab-EFREST/","title":"Entity Framework and REST","text":"<p>We will build a new REST API (ASP.NET Core Web API) using Entity Framework.</p>"},{"location":"Lab-EFREST/#pre-requisites-and-preparation","title":"Pre-requisites and preparation","text":"<p>Required tools to complete the tasks:</p> <ul> <li>Windows, Linux, or macOS: All tools are platform-independent, or a platform-independent alternative is available.</li> <li>Postman</li> <li>DB Browser for SQLite - if you would like to check the database (not necessary)</li> <li>GitHub account and a git client</li> <li>Microsoft Visual Studio 2019/2022 with the settings here<ul> <li>When using Linux or macOS, you can use Visual Studio Code, the .NET Core SDK, and dotnet CLI.</li> </ul> </li> <li> <p>.NET Core 3.1 SDK</p> <p>.NET Core 3.1</p> <p>Mind the version! You need .NET Core SDK version 3.1 to solve these exercises.</p> <p>On Windows, it might already be installed along with Visual Studio (see here how to check it); if not, use the link above to install (the SDK and not the runtime). You need to install it manually when using Linux or macOS.</p> </li> </ul> <p>Materials for preparing for this laboratory:</p> <ul> <li>Entity Framework, REST API, Web API, and using Postman<ul> <li>Check the materials of Data-driven systems including the seminars</li> </ul> </li> <li>Official Microsoft tutorial for Web API</li> </ul>"},{"location":"Lab-EFREST/#exercise-overview","title":"Exercise overview","text":"<p>In this exercise, we will implement the backend of a simple task management web application. The application handles two types of entities: statuses and tasks where a status is associated with multiple tasks (1-* connection). (In the text of the exercises, will use tasks only for referring to this entity of the application.)</p> <p>If we had a frontend, the application would be a Kanban-board. We will not create a frontend here, only the REST API and Entity Framework + ASP.NET Core Web API server.</p>"},{"location":"Lab-EFREST/#initial-steps","title":"Initial steps","text":"<p>Keep in mind that you are expected to follow the submission process.</p>"},{"location":"Lab-EFREST/#create-and-check-out-your-git-repository","title":"Create and check out your Git repository","text":"<ol> <li> <p>Create your git repository using the invitation link in Moodle. Each lab has a different URL; make sure to use the right one!</p> </li> <li> <p>Wait for the repository creation to complete, then check out the repository.</p> <p>If you are not asked for credentials to log in to GitHub in university computer laboratories when checking out the repository, the operation may fail. This is likely due to the machine using someone else's GitHub credentials. Delete these credentials first (see here), then retry the checkout.</p> </li> <li> <p>Create a new branch with the name <code>solution</code> and work on this branch.</p> </li> <li> <p>Open the checked-out folder and type your Neptun code into the <code>neptun.txt</code> file. There should be a single line with the 6 characters of your Neptun code and nothing else in this file.</p> </li> </ol>"},{"location":"Lab-EFREST/#creating-the-database","title":"Creating the database","text":"<p>We will not be using Microsoft SQL Server here, but Sqlite. It is a light-weight relational database management system mainly for client-side applications. Although it is not recommended for servers, we will use it for simplicity. Sqlite requires no installation.</p> <p>We will define the database schema with code first using C# code. Therefore, we will not need to create the schema with SQL commands.</p>"},{"location":"Lab-EFREST/#exercise-1-managing-statuses","title":"Exercise 1: Managing statuses","text":"<p>In this exercise, we will implement the basic management of status entities.</p> <p>You can earn 8 points with the completion of this exercise.</p>"},{"location":"Lab-EFREST/#open-the-visual-studio-solution","title":"Open the Visual Studio solution","text":"<p>Open the Visual Studio solution (the <code>.sln</code>) file in the checked-out repository. If Visual Studio tells you that the project is not supported, you need to install a missing component (see here).</p> <p>Do NOT upgrade any version</p> <p>Do not upgrade the project, the .NET Core version, or any Nuget package! If you see such a question, always choose no!</p> <p>The solution is structured according to a multi-tier architecture:</p> <ul> <li>The <code>Controllers</code> folder has the Web Api controllers handling the REST requests.</li> <li>The <code>DAL</code> folder implements the data access; it contains a repository layer and an Entity Framework Code First data model.</li> <li>The <code>Model</code> folder contains the shared entities.</li> </ul> <p>In this exercise, you will need to work in classes <code>DAL.StatusesRepository</code> and <code>Controllers.StatusesController</code>. You can make changes to these classes as long as the source code complies (and the repository implements interface <code>IStatusesRepository</code>).</p>"},{"location":"Lab-EFREST/#start-the-web-app","title":"Start the web app","text":"<p>Check if the web application starts.</p> <ol> <li> <p>Compile the code and start in Visual Studio.</p> </li> <li> <p>Open URL http://localhost:5000/api/ping in a browser.</p> </li> </ol> <p>If everything goes well, you see the response \"pong\" in the browser, and the incoming request is logged in the console.</p>"},{"location":"Lab-EFREST/#list-all-statuses-4p","title":"List all statuses (4p)","text":"<p>Implement the first operation to list all available status entities.</p> <ol> <li> <p>Open class <code>Model.Status</code>. This is the entity class used by the business layer.</p> <p>Do NOT make any changes to this class.</p> </li> <li> <p>Open class <code>DAL.EfDbContext.DbStatus</code>. This is the Entity Framework and database representation of the same entity. Let us implement this class:</p> <pre><code>public class DbStatus\n{\npublic int Id { get; set; }\npublic string Name { get; set; }\n}\n</code></pre> <p>The <code>Id</code> is the primary key in the database, and <code>Name</code> is the name of the status.</p> </li> <li> <p>Open class <code>DAL.EfDbContext.TasksDbContext</code>. We need to add a new DbSet property here and configure the C# - database mapping in method <code>OnModelCreating</code>:</p> <pre><code>public class TasksDbContext : DbContext\n{\npublic DbSet&lt;DbStatus&gt; Statuses { get; set; }\n\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\nmodelBuilder.Entity&lt;DbStatus&gt;()\n.ToTable(\"statuses\");\nmodelBuilder.Entity&lt;DbStatus&gt;()\n.HasKey(s =&gt; s.Id);\nmodelBuilder.Entity&lt;DbStatus&gt;()\n.Property(s =&gt; s.Name).HasMaxLength(50)\n.IsRequired(required: true).IsUnicode(unicode: true);\n}\n}\n</code></pre> <p>This configuration sets the name of the table in the database, the key (which will generate values automatically), and the constraints related to the name field.</p> </li> <li> <p>Go to the method <code>DAL.StatusesRepository.List()</code>. This is the repository layer that interacts with the database using Entity Framework. Let us list all statuses from the database:</p> <pre><code>public IReadOnlyCollection&lt;Model.Status&gt; List()\n{\nreturn db.Statuses.Select(ToModel).ToList();\n}\n</code></pre> <p>The variable <code>db</code> represents our database, the DbContext, injected via the framework.</p> </li> <li> <p>We will use the helper method <code>ToModel</code> to translate the EF representation to the business layer representation. Let us implement this method (in the repository class).</p> <pre><code>private static Model.Status ToModel(DbStatus value)\n{\nreturn new Model.Status(value.Id, value.Name);\n}\n</code></pre> </li> <li> <p>Once the repository is ready, let us move to the controller. Open class <code>Controllers.StatusesController</code>. Add your Neptun code into the controller's URL: this controller shall respond to queries that arrive at URL  <code>/api/statuses/neptun</code> where the last 6 characters are your Neptun code, all lowercase.</p> <pre><code>[Route(\"api/statuses/neptun\")]\n[ApiController]\npublic class StatusesController : ControllerBase\n</code></pre> <p>Neptun code is important</p> <p>The Neptun code shall appear in screenshots later. You must add it as specified above!</p> </li> <li> <p>Let us implement an endpoint for handling the <code>GET /api/statuses/neptun</code> request: The dependency injection is configured already; thus, the constructor accepts the repository interface (not the implementation but its interface).</p> <pre><code>public class StatusesController : ControllerBase\n{\n// ...\n\n[HttpGet]\npublic IEnumerable&lt;Status&gt; List()\n{\nreturn repository.List();\n}\n}\n</code></pre> </li> <li> <p>Compile the code and start the app.</p> </li> <li> <p>Open Postman and send a GET request to URL http://localhost:5000/api/statuses/neptun (with your Neptun code in the URL).</p> <p></p> <p>The query is successful if Postman reports status code 200, and the result is empty. If there is an error, check the Output window in Visual Studio and the running application console window.</p> </li> <li> <p>Add some test data. Stop the application. Go to method <code>DAL.EfDbContext.TasksDbContext.OnModelCreating</code> and insert a few test records (also called seed data):</p> <pre><code>public class TasksDbContext : DbContext\n{\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n// ...\n\nmodelBuilder.Entity&lt;DbStatus&gt;()\n.HasData(new[]\n{\nnew DbStatus() { Id = 1, Name = \"new\" },\nnew DbStatus() { Id = 2, Name = \"in progress\" },\n});\n}\n}\n</code></pre> </li> <li> <p>Compile the code again, then start the application and repeat the same GET query. The response shall include the two statuses.</p> <p>If you do not see the status records</p> <p>If the seed records do not appear in the response, it is possible that the database was not updated with the <code>HasData</code> method. Delete the SQLite database file <code>tasks.db</code>; this will re-create the database when the application starts again.</p> <p>Generally, schema and data modification in live environments are handled using migrations. To simplify things, we will not use migrations. If the database schema is changed, delete <code>tasks.db</code>.</p> </li> </ol>"},{"location":"Lab-EFREST/#query-and-insert-operations-4p","title":"Query and insert operations (4p)","text":"<p>There are a few other operations we need to implement:</p> <ul> <li>check existence by specifying name (<code>HEAD /api/statuses/neptun/{name}</code>),</li> <li>find record by ID (<code>GET /api/statuses/neptun/{id}</code>),</li> <li>adding a new status record (<code>POST /api/statuses/neptun</code>).</li> </ul> <p>Let us implement these.</p> <ol> <li> <p>Let us start with the implementation of the first two in the repository. When looking for an item based on a name, we will perform a case-insensitive comparison.</p> <pre><code>public bool ExistsWithName(string statusName)\n{\nreturn db.Statuses.Any(s =&gt; EF.Functions.Like(s.Name, statusName));\n}\n\npublic Model.Status FindById(int statusId)\n{\nvar dbRecord = db.Statuses.FirstOrDefault(s =&gt; s.Id == statusId);\nif (dbRecord == null)\nreturn null;\nelse\nreturn ToModel(dbRecord);\n}\n</code></pre> <p><code>EF.Functions.Like</code> helps us to write a SQL <code>like</code> query in Entity Framework. The command will translate into the proper <code>LIKE</code> operator when executed, allowing us to perform a case insensitive comparison.</p> </li> <li> <p>The controller endpoints for these operations are:</p> <pre><code>[HttpHead(\"{statusName}\")]\n[ProducesResponseType(StatusCodes.Status200OK)]\n[ProducesResponseType(StatusCodes.Status404NotFound)]\npublic ActionResult ExistsWithName(string statusName)\n{\nvar exists = repository.ExistsWithName(statusName);\nif (exists)\nreturn Ok();\nelse\nreturn NotFound();\n}\n\n[HttpGet(\"{id}\")]\n[ProducesResponseType(StatusCodes.Status200OK)]\n[ProducesResponseType(StatusCodes.Status404NotFound)]\npublic ActionResult&lt;Status&gt; Get(int id)\n{\nvar value = repository.FindById(id);\nif (value == null)\nreturn NotFound();\nelse\nreturn Ok(value);\n}\n</code></pre> <p>Note the controller method attributes and return values! If the response contains data (in the http body, the return type is <code>ActionResult&lt;T&gt;</code>; if there is no body and only a status code is returned, the return type is <code>ActionResult</code>. Methods <code>Ok</code> and <code>NotFound</code> help us create the correct responses.</p> <p>The URL is defined on two \"levels.\" We defined <code>/api/statuses/neptun</code> on the controller; it applies to all endpoints. It is the \"last part\" of the URL that is defined on each endpoint separately.</p> </li> <li> <p>To implement the insertion, let us start with the repository again. Insert is triggered by receiving a <code>CreateStatus</code> model class with a name. We want to ensure unique names. Thus, we need to verify it before insertion.</p> <pre><code>public Model.Status Insert(CreateStatus value)\n{\nusing (var tran = db.Database.BeginTransaction(System.Data.IsolationLevel.RepeatableRead))\n{\nif (db.Statuses.Any(s =&gt; EF.Functions.Like(s.Name, value.Name)))\nthrow new ArgumentException(\"name must be unique\");\n\nvar toInsert = new DbStatus() { Name = value.Name };\ndb.Statuses.Add(toInsert);\n\ndb.SaveChanges();\ntran.Commit();\n\nreturn new Model.Status(toInsert.Id, toInsert.Name);\n}\n}\n</code></pre> <p>Mind the transaction! First, we check if an identical name exists. If so, an error is raised. After inserting the record, the transaction also has to be committed. Since the database assigns the ID, the repository needs to return the created entity with this assigned ID.</p> </li> <li> <p>The POST http request is handled by the following controller endpoint:</p> <pre><code>[HttpPost]\n[ProducesResponseType(StatusCodes.Status201Created)]\n[ProducesResponseType(StatusCodes.Status400BadRequest)]\npublic ActionResult&lt;Status&gt; Create([FromBody] Dto.CreateStatus value)\n{\ntry\n{\nvar created = repository.Insert(value);\nreturn CreatedAtAction(nameof(Get), new { id = created.Id }, created);\n}\ncatch (ArgumentException ex)\n{\nreturn BadRequest(new { error = ex.Message });\n}\n}\n</code></pre> <p>Note both the successful and the failed responses. If insertion succeeded, the <code>CreatedAtAction</code> helper method prepares a response that contains the entity in the body and adds a Location header with the URL to fetch the record (thus the reference to <code>nameof(Get)</code>). In case of failure, the exception is handled by reporting the error to the caller. The status code will be 400, and the body will indicate an explanation as text (as REST does not have other means to report errors besides status code).</p> </li> <li> <p>Compile and start the app. Test the queries! Produce both successful and erroneous responses too.</p> </li> </ol> <p>SUBMISSION</p> <p>Create a screenshot in Postman (or an alternative tool you used) that shows a failed insert request and response. The cause of failure should be that an item with the same name already exists. Save the screenshot as <code>f1.png</code> and submit it with the other files of the solution. The screenshot shall include both the request and the response with all details (URL, body, response code, response body). Verify that your Neptun code is visible in the URL! The screenshot is required to earn the points.</p>"},{"location":"Lab-EFREST/#exercise-2-task-operations","title":"Exercise 2: Task operations","text":"<p>In this exercise, we will implement the basic services for tasks.</p> <p>You can earn 6 points with the completion of this exercise.</p>"},{"location":"Lab-EFREST/#preparation-with-entity-framework","title":"Preparation with Entity Framework","text":"<p>The task entity is represented by the class <code>Model.Task</code>. It has a unique <code>ID</code>, a text <code>Title</code>, a <code>Done</code> flag to signal completion, and a <code>Status</code> field referencing the status of this task (with 1-* multiplicity).</p> <p>Define the Entity Framework model first:</p> <ol> <li> <p>Define the Entity Framework data model of this entity in class <code>DAL.EfDbContext.DbTask</code>. The referenced status should be a proper navigation property!</p> </li> <li> <p>Add the new <code>DbSet</code> field to class <code>TasksDbContext</code>.</p> </li> <li> <p>Specify the configuration of the mapping of this entity in <code>OnModelCreating</code>. Make sure to configure the navigation property here correctly!</p> </li> <li> <p>Add some initial (\"seed\") data, as seen previously.</p> </li> </ol>"},{"location":"Lab-EFREST/#operations-in-the-repository","title":"Operations in the repository","text":"<p>Create a new class, <code>TasksRepository</code>, in the <code>DAL</code> folder that implements the existing <code>ITasksRepository</code> interface. Implement the following operations:</p> <ul> <li><code>IReadOnlyCollection&lt;Task&gt; List()</code>: lists all available tasks</li> <li><code>Task FindById(int taskId)</code>: returns the single task with the specified ID if it exists; returns null otherwise</li> <li><code>Task Insert(CreateTask value)</code>: adds a new task to the database with the specified title and associates it with the specified status; if no status with the provided name exists, create a new status record; the return value is the new task entity as created in the database with its assigned ID</li> <li><code>Task Delete(int taskId)</code>: deletes the specified task; return value is the task (state before deletion), or null if the task does not exist</li> </ul> <p>You don't need to implement the other operations yet; however, an implementation needs to be provided so that the code compiles. You may use <code>throw new NotImplementedException();</code> as a placeholder for now.</p> <p>Tip</p> <p>You will need to map the database entity to the model class in the repository. It is recommended to create a <code>ToModel</code> helper method, as seen previously. When querying the tasks, you will need the associated status record too (to get the name). You will need to use an <code>.Include()</code>.</p>"},{"location":"Lab-EFREST/#operations-on-the-rest-api","title":"Operations on the REST Api","text":"<p>Create a new <code>TasksController</code> in the <code>Controllers</code> folder. The controller shall handle REST queries on URL <code>/api/tasks/neptun</code> where the last part is your own Neptun code lowercase.</p> <p>The controller shall take an <code>ITasksRepository</code> as a parameter. For the dependency injection framework to resolve this in runtime, further configuration is needed. In the <code>Startup</code> class, register this interface and its corresponding implementation in the method <code>ConfigureServices</code> similarly to how the other repository is registered. (The controller does not need registration.)</p> <p>Implement the following operations using the previously implemented repository methods:</p> <ul> <li><code>GET /api/tasks/neptun</code>: returns all tasks; response code is always <code>200 OK</code></li> <li><code>GET /api/tasks/neptun/{id}</code>: gets a single task; response code is <code>200 OK</code> or <code>404 Not found</code></li> <li><code>POST /api/tasks/neptun</code>: add a new task based on a <code>Dto.CreateTask</code> instance specified in the body; the response code is <code>201 Created</code> with the new entity in the body and an appropriate Location header</li> <li><code>DELETE /api/tasks/neptun/{id}</code>: deleted a task; response code is <code>204 No content</code> or <code>404 Not found</code></li> </ul> <p>SUBMISSION</p> <p>Create a screenshot in Postman (or an alternative tool you used) that shows an arbitrary request and response from the list above. Save the screenshot as <code>f2.png</code> and submit it with the other files of the solution. The screenshot shall include both the request and the response with all details (URL, body, response code, response body). Verify that your Neptun code is visible in the URL! The screenshot is required to earn the points.</p>"},{"location":"Lab-EFREST/#exercise-3-task-operations","title":"Exercise 3: Task operations","text":"<p>Implement two new endpoints in the controller handling tasks that alter existing tasks as follows.</p> <p>You can earn 3-3 points with the completion of these exercises.</p>"},{"location":"Lab-EFREST/#marking-a-task-as-done","title":"Marking a task as done","text":"<p>The flag <code>Task.Done</code> signals that a task is completed. Create a new http endpoint that uses the <code>ITasksRepository.MarkDone</code> method to set this flag on a task instance.</p> <p>Request: <code>PATCH /api/tasks/neptun/{id}/done</code> with <code>{id}</code> being the tasks ID.</p> <p>Response:</p> <ul> <li><code>404 Not found</code> if no such task exists.</li> <li><code>200 OK</code> if the operation was successful - returns the task in the body after the modification is done.</li> </ul>"},{"location":"Lab-EFREST/#move-to-a-new-status","title":"Move to a new status","text":"<p>A task is associated with status through <code>Task.StatusId</code> (or similar). Create a new http endpoint that uses the <code>ITasksRepository.MoveToStatus</code> method to change the status of the specified tasks to a new one. If the new status with the provided name does not exist, create one.</p> <p>Request: <code>PATCH /api/tasks/neptun/{id}/move?newStatusName=newname</code> with</p> <ul> <li><code>{id}</code> is the task's ID,</li> <li>and the name of the new status is received in the <code>newStatusName</code> query parameter.</li> </ul> <p>Response:</p> <ul> <li><code>404 Not found</code> if no such task exists.</li> <li><code>200 OK</code> if the operation was successful - returns the task in the body after the modification is done.</li> </ul> <p>SUBMISSION</p> <p>Create a screenshot in Postman (or an alternative tool you used) that shows an arbitrary request and response from the two above. Save the screenshot as <code>f3.png</code> and submit it with the other files of the solution. The screenshot shall include both the request and the response with all details (URL, body, response code, response body). Verify that your Neptun code is visible in the URL! The screenshot is required to earn the points.</p>"},{"location":"Lab-EFREST/#exercise-4-optional-exercise","title":"Exercise 4: Optional exercise","text":"<p>You can earn an additional +3 points with the completion of this exercise. (In the evaluation, you will see the text \"imsc\" in the exercise title; this is meant for the Hungarian students. Please ignore that.)</p> <p>If we have lots of tasks listing them should not return all of them at once. Implement a new endpoint to return a subset of the tasks (i.e., \"paging\"):</p> <ul> <li>It returns the tasks in a deterministic fashion sorted by ID.</li> <li>The query accepts a <code>count</code> parameter that specifies how many tasks to return.</li> <li>Specifying the next page is performed via a <code>from</code> parameter. This <code>from</code> is the ID of the first item to return on this page.</li> <li>Both the <code>from</code> and <code>count</code> are specified as query parameters.</li> <li>The new paging endpoint should be available on URL <code>GET /api/tasks/neptun/paged</code> (the <code>/paged</code> part is necessary so that the previous listing endpoint also remains functional).</li> <li> <p>The response should return an instance of class <code>Controllers.Dto.PagedTaskList</code>. This includes:</p> <ul> <li><code>items</code>: an array containing the tasks on the current page,</li> <li><code>count</code>: specifying the number of items on the current page,</li> <li><code>nextId</code>: id of the next task - to fetch the next page (to be used in <code>from</code>),</li> <li> <p><code>nextUrl</code>: a helper URL that fetches the next page, or <code>null</code> if there are no further pages.</p> <p>Use the <code>Url.Action</code> helper method to assemble this URL. Do not hardcode \"localhost:5000\" or \"/api/tasks/paged\" in the source code! You will not need string operations to achieve this.</p> <p><code>Url.Action</code> will give you an absolute URL when all parameters (<code>action</code>, <code>controller</code>, <code>values</code>, <code>protocol</code>, and <code>host</code>) are specified; for the latter ones <code>this.HttpContext.Request</code> can provide you the required values.</p> </li> </ul> </li> <li> <p>The request always returns 200 OK; if there are no items, the result set shall be empty.</p> </li> </ul> <p>The requests-responses shows you the expected behavior:</p> <ol> <li> <p><code>GET /api/tasks/neptun/paged?count=2</code></p> <p>This is the first request. There is no <code>from</code> value specified to start from the first item.</p> <p>Response:</p> <pre><code>{\n\"items\": [\n{\n\"id\": 1,\n\"title\": \"doing homework\",\n\"done\": false,\n\"status\": \"pending\"\n},\n{\nID: 2,\n\"title\": \"doing more homework\",\n\"done\": false,\n\"status\": \"new\"\n}\n],\n\"count\": 2,\n\"nextId\": 3,\n\"nextUrl\": \"http://localhost:5000/api/tasks/neptun/paged?from=3&amp;count=2\"\n}\n</code></pre> </li> <li> <p><code>GET /api/tasks/neptun/paged?from=3&amp;count=2</code></p> <p>This is to query the second page.</p> <p>Response:</p> <pre><code>{\n\"items\": [\n{\n\"id\": 3,\n\"title\": \"hosework\",\n\"done\": true,\n\"status\": \"done\"\n}\n],\n\"count\": 1,\n\"nextId\": null,\n\"nextUrl\": null\n}\n</code></pre> <p>The response indicates no further pages as both <code>nextId</code> and <code>nextUrl</code> are null.</p> </li> <li> <p><code>GET /api/tasks/neptun/paged?from=999&amp;count=999</code></p> <p>Returns an empty page.</p> <p>Response:</p> <pre><code>{\n\"items\": [],\n\"count\": 0,\n\"nextId\": null,\n\"nextUrl\": null\n}\n</code></pre> </li> </ol> <p>SUBMISSION</p> <p>Create a screenshot in Postman (or an alternative tool you used) that shows an arbitrary request and response of fetching a page. Save the screenshot as <code>f4.png</code> and submit it with the other files of the solution. The screenshot shall include both the request and the response with all details (URL, body, response code, response body). Verify that your Neptun code is visible in the URL! The screenshot is required to earn the points.</p>"},{"location":"Lab-MSSQL/","title":"MSSQL","text":"<p>In this lab, we will practice working with the server-side programming features of Microsoft SQL Server.</p>"},{"location":"Lab-MSSQL/#pre-requisites-and-preparation","title":"Pre-requisites and preparation","text":"<p>Required tools to complete the tasks:</p> <ul> <li>Windows, Linux, or macOS: All tools are platform-independent, or a platform-independent alternative is available.</li> <li>Microsoft SQL Server<ul> <li>The free Express version is sufficient, or you may also use localdb installed with Visual Studio</li> <li>A Linux version is also available.</li> <li>On macOS, you can use Docker.</li> </ul> </li> <li>SQL Server Management Studio, or you may also use the platform-independent Azure Data Studio is</li> <li>Database initialization script: mssql.sql</li> <li>GitHub account and a git client</li> </ul> <p>Materials for preparing for this laboratory:</p> <ul> <li>Using Microsoft SQL Server: description and video</li> <li>The schema of the database</li> <li>Microsoft SQL Server server-side programming and the SQL language<ul> <li>Check the materials of Data-driven systems including the seminars</li> </ul> </li> </ul>"},{"location":"Lab-MSSQL/#initial-steps","title":"Initial steps","text":"<p>Keep in mind that you are expected to follow the submission process.</p>"},{"location":"Lab-MSSQL/#create-and-check-out-your-git-repository","title":"Create and check out your Git repository","text":"<ol> <li> <p>Create your git repository using the invitation link in Moodle. Each lab has a different URL; make sure to use the right one!</p> </li> <li> <p>Wait for the repository creation to complete, then check out the repository.</p> <p>If you are not asked for credentials to log in to GitHub in university computer laboratories when checking out the repository, the operation may fail. This is likely due to the machine using someone else's GitHub credentials. Delete these credentials first (see here), then retry the checkout.</p> </li> <li> <p>Create a new branch with the name <code>solution</code> and work on this branch.</p> </li> <li> <p>Open the checked-out folder and type your Neptun code into the <code>neptun.txt</code> file. There should be a single line with the 6 characters of your Neptun code and nothing else in this file.</p> </li> </ol>"},{"location":"Lab-MSSQL/#create-the-database","title":"Create the database","text":"<ol> <li> <p>Connect to Microsoft SQL Server using SQL Server Management Studio. Start Management Studio and use the following connection details:</p> <ul> <li>Server name: <code>(localdb)\\mssqllocaldb</code> or <code>.\\sqlexpress</code> (which is short for: <code>localhost\\sqlexpress</code>)</li> <li>Authentication: <code>Windows authentication</code></li> </ul> </li> <li> <p>Create a new database (if it does not exist yet). The name should be your Neptun code: in Object Explorer right-click Databases and choose Create Database.</p> <p>IMPORTANT</p> <p>The name of the database must be your Neptun code. You will need to submit screenshots that display the database name this way!</p> </li> <li> <p>Create the sample database by executing the initializer script Open a new Query window, paste the script into the window, then execute it. Make sure to select the correct database in the toolbar dropdown.</p> <p></p> </li> <li> <p>Verify that the tables are created. If the Tables folder was open before, you need to refresh it.</p> <p>.</p> </li> </ol>"},{"location":"Lab-MSSQL/#exercise-1-category-view-and-data-insertion","title":"Exercise 1: Category view and data insertion","text":"<p>You can earn 8 points with the completion of this exercise.</p>"},{"location":"Lab-MSSQL/#create-a-view","title":"Create a view","text":"<p>Create a new <code>CategoryWithParent</code> view that lists the <code>Category</code> table's contents as follows. It should have two columns: the <code>Name</code> of the category and the name of the parent category (or null if it does not exist).</p> <p>Open a new Query window. Make sure to select the correct database. Create the view by executing the T-SQL command below.</p> <pre><code>create view CategoryWithParent\nas\nselect c.Name CategoryName, p.Name ParentCategoryName\nfrom Category c\nleft outer join Category p on c.ParentCategoryId = p.ID\n</code></pre> <p>Check the contents of the view!</p> <p></p>"},{"location":"Lab-MSSQL/#insert-via-the-view","title":"Insert via the view","text":"<p>Create a trigger with the name <code>InsertCategoryWithParent</code> that allows inserting a new category through the view (that is, by specifying the category name and the parent category name). It is not necessary to set a parent category. Still, if it is specified and there is no category with the provided name, an error should be raised, and the operation aborted.</p> <p>You will need an instead of trigger that allows us to define how to insert the data. The skeleton of the trigger is provided below.</p> <pre><code>create trigger InsertCategoryWithParent -- name of the trigger\non CategoryWithParent -- name of the view\ninstead of insert    -- trigger code executed insted of insert\nas\nbegin\ndeclare @newname nvarchar(255) -- variables used below\ndeclare @parentname nvarchar(255)\n\n-- using a cursor to navigate the inserted table\ndeclare ic cursor for select * from inserted\nopen ic\n-- standard way of managing a cursor\nfetch next from ic into @newname, @parentname\nwhile @@FETCH_STATUS = 0\nbegin\n-- check the received values available in the variables\n-- find the id of the parent, if specified\n-- throw error if anything is not right\n-- or insert the record into the Category table\nfetch next from ic into @newname, @parentname\nend\n\nclose ic -- finish cursor usage\ndeallocate ic\nend\n</code></pre> <ol> <li> <p>Finish this trigger by completing the code in the cycle.</p> <ul> <li> <p>If a parent category name is provided, check whether any category with the same name as <code>@parentname</code> exists.</p> </li> <li> <p>If not, raise an error and abort the trigger.</p> </li> <li> <p>If everything is fine, insert the data into the <code>Category</code> table (and not the view... since the view does not store any data, hence this trigger).</p> </li> </ul> <p>SUBMISSION</p> <p>Submit the code of the trigger in file <code>f1-trigger.sql</code>. The file should contain a single <code>create trigger</code> statement! Do not add <code>[use]</code> or <code>go</code> commands to the file! The correct behavior earns you 4 points.</p> </li> <li> <p>Verify the correct behavior of the trigger! Write an insert statement that successfully inserts a new category record through the view. Then write an insert statement that fails.</p> <p>Suppose that the database is in its initial state: the categories in the table are the ones included in the initializer script. The two tests should not depend on each other. Both shall produce the expected output regardless of whether the other was executed before!</p> <p>Use simple names</p> <p>It is recommended to use names (i.e., category names) that contain no special characters. Incorrect encoding of the SQL file might result in incorrect behavior otherwise. E.g., you may use the LEGO category as a known existing category.</p> <p>SUBMISSION</p> <p>Write the test insert statements into files <code>f1-test-ok.sql</code> and <code>f1-test-error.sql</code>. Each file shall contain a single <code>insert</code> statement! They should not include any <code>use</code> or <code>go</code> commands. Each file can earn you 2 points.</p> </li> </ol>"},{"location":"Lab-MSSQL/#exercise-2-validating-invoices","title":"Exercise 2: Validating invoices","text":"<p>You can earn 6 points with the completion of this exercise.</p>"},{"location":"Lab-MSSQL/#stored-procedure","title":"Stored procedure","text":"<p>Create a store procedure with the name <code>CheckInvoice</code> that expects an <code>int</code> input parameter with the name <code>@invoiceid</code>.</p> <ul> <li>The procedure shall check the invoice corresponding to the provided id: check each <code>InvoiceItem</code> whether the <code>Amount</code> equals the amount on the corresponding <code>OrderItem</code>. (<code>InvoiceItem</code> directly references the corresponding <code>OrderItem</code>.)</li> <li>If there are any differences, print the amount values in both, and print the related product name as follows: <code>Error: Ball (invoice 5 order 6)</code></li> <li>The procedure should print any message only if an error was found. Do not leave test output in the submitted code!</li> <li>The procedure return value shall be an <code>int</code> equal to 0 when no discrepancies were found and 1 in case one was identified. This value should be <code>return</code>-ed at the end of the procedure (do not use an <code>output</code> parameter).</li> </ul> <p>Use the <code>print</code> command for output as follows: <code>PRINT 'Text' + @variable + 'Text'</code> Any variable you print must be of character type. To convert a number to characters use: <code>convert(varchar(5), @variable)</code>, e.g. <code>PRINT 'Text' + convert(varchar(5), @variable)</code></p> <p>SUBMISSION</p> <p>Write the stored procedure code in file <code>f2-procedure.sql</code>. The file should contain a single <code>create proc</code> statement! The correct behavior earns you 4 points. Partially incorrect behavior earns you partial points.</p>"},{"location":"Lab-MSSQL/#validate-all-invoices","title":"Validate all invoices","text":"<p>Write T-SQL code that calls the procedure on all invoices. You should use a cursor to iterate all invoices.</p> <p>The code shall print the ID of the invoice (e.g., <code>InvoiceID: 12</code>) before checking an invoice. If an invoice contains no discrepancies, print 'Invoice ok' before moving on to the next one. Check the Messages pane under the query window for the messages.</p> <p>Invoking a stored procedure</p> <p>Invoking a stored procedure is performed with the <code>exec</code> statement:</p> <pre><code>declare @checkresult int\nexec @checkresult = CheckInvoice 123\n</code></pre> <p>Verify the correct behavior of this code. You might need to alter a few records in the database to have any discrepancies. (The testing code does not need to be submitted.)</p> <p>SUBMISSION</p> <p>Submit the code checking all invoices in file <code>f2-check-all.sql</code>. The file shall contain the T-SQL code. It should not include the stored procedure nor any <code>use</code> or <code>go</code> commands. You can earn 2 points with the completion of this task.</p> <p>SUBMISSION</p> <p>Create a screenshot of the output when a discrepancy was found. Save the screenshot as <code>f2.png</code> and submit it with the other files of the solution. The screenshot shall display the database name (which should be your Neptun code) in the Object Explorer window and the output messages too.</p>"},{"location":"Lab-MSSQL/#exercise-3-denormalize-invoices","title":"Exercise 3: Denormalize invoices","text":"<p>You can earn 6 points with the completion of this exercise.</p>"},{"location":"Lab-MSSQL/#new-column","title":"New column","text":"<p>Update the <code>Invoice</code> table by adding a new <code>ItemCount</code> integer column that contains the number of items on the invoice (regarding the <code>InvoiceItems</code> records associated with each invoice).</p> <p>SUBMISSION</p> <p>The code for adding the column shall be submitted in file <code>f3-column.sql</code>. The file shall contain a single <code>alter table</code> statement and should not include any <code>use</code> or <code>go</code> commands. You can earn 1 point with the completion of this task. This task is a prerequisite for the next ones.</p> <p>Write T-SQL code block to fill this new column with the correct values.</p> <p>If an <code>Invoice</code> has an associated item with 2 red beach balls and another item with 1 tennis racket, then there are 3 items on this invoice. Note that it is invoices (and not orders) you have to consider here!</p> <p>SUBMISSION</p> <p>Submit the code in file <code>f3-fill.sql</code>. The file shall contain a single T-SQL code block. Do not use stored procedures or triggers here, and the code should not have any <code>[use]</code> or <code>go</code> statements either. You can earn 1 point with the completion of this task.</p>"},{"location":"Lab-MSSQL/#maintaining-the-correct-value","title":"Maintaining the correct value","text":"<p>Create a trigger with the name <code>InvoiceItemCountMaintenance</code> that ensures the value in this new column is updated when an invoice or related items are updated. The trigger must be efficient! Re-calculating the number of items is not an acceptable solution. The trigger must also work correctly when multiple items are updated at the same time.</p> <p>Tip</p> <p>The trigger shall be on the <code>InvoiceItem</code> table despite the new column being in the <code>Invoice</code> table.</p> <p>Important</p> <p>Do not forget that triggers are executed per statement and not for each row; that is, your trigger will need to handle multiple changes in the implicit tables! The <code>inserted</code> and <code>deleted</code> implicit variables are tables must be treated as such.</p> <p>SUBMISSION</p> <p>Submit the code of the trigger in file <code>f3-trigger.sql</code>. The file shall contain a single <code>create trigger</code> statement and should not contain any <code>use</code> or <code>go</code> commands. The correct behavior earns you 4 points. Partially incorrect behavior earns you partial points.</p> <p>Verify the correct behavior of the trigger! The test code need not be submitted, but make sure to verify the behavior. Make sure to check the case when multiple records are modified with a single statement, e.g., execute an <code>update</code> without a <code>where</code> condition).</p> <p>SUBMISSION</p> <p>Create a screenshot displaying the contents of the table <code>Invoice</code> with the <code>ItemCount</code> column and its correctly filled values. Save the screenshot as <code>f3.png</code> and submit it with the other files of the solution. The screenshot shall display the database name (which should be your Neptun code) in the Object Explorer window and the contents of the <code>Invoice</code> table. The screenshot is required to earn the points of this part of the exercise.</p>"},{"location":"Lab-MSSQL/#exercise-4-optional-exercise","title":"Exercise 4: Optional exercise","text":"<p>You can earn an additional +3 points with the completion of this exercise. (In the evaluation, you will see the text \"imsc\" in the exercise title; this is meant for the Hungarian students. Please ignore that.)</p> <p>Query the <code>Categories</code> so that you get the following outcome:</p> Name Count Rank Building items 3 1 Months 0-6 2 2 DUPLO 1 3 LEGO 1 4 Months 18-24 1 5 Months 6-18 1 6 Play house 1 7 <p>The first column is the name of the category. The second column contains the number of products in this category. And finally, the third is the rank of the results based on the number of products in the category, descending; if the counts are equal, then the order is based on the name of the category ascending. The ranking should be continuous without gaps, and the final results should be ordered by this rank. The query should be a single statement. The name of the columns in the result set should be the ones you see above.</p> <p>Tip</p> <p>The fact that the third column is called \"rank\" should give you an idea.</p> <p>SUBMISSION</p> <p>Submit the query in file <code>f4.sql</code>. The file shall contain a single <code>select</code> query without any <code>use</code> or <code>go</code> commands.</p> <p>SUBMISSION</p> <p>Create a screenshot that shows the outcome of the query. Save the screenshot as <code>f4.png</code> and submit it with the other files of the solution. The screenshot shall display the database name (which should be your Neptun code) in the Object Explorer window and the query results. The screenshot is required to earn the points.</p>"},{"location":"Lab-MongoDB/","title":"MongoDB","text":"<p>In this lab, we will work with the MongoDB NoSQL database and the Mongo C# driver.</p>"},{"location":"Lab-MongoDB/#pre-requisites-and-preparation","title":"Pre-requisites and preparation","text":"<p>Required tools to complete the tasks:</p> <ul> <li>Windows, Linux, or macOS: All tools are platform-independent, or a platform-independent alternative is available.</li> <li>MongoDB Community Server (download)</li> <li> <p>Robo 3T (download)</p> <ul> <li> <p>Without installing you can run the server with the following command using Docker:</p> <p><code>cmd docker run --name swlab1-mongo -p 27017:27017 -d mongo</code></p> </li> </ul> </li> <li> <p>Sample database initialization script: (mongo.js)</p> </li> <li>GitHub account and a git client</li> <li>Microsoft Visual Studio 2022 with the settings here<ul> <li>When using Linux or macOS, you can use Visual Studio Code, the .NET SDK, and dotnet CLI.</li> </ul> </li> <li> <p>.NET Core 6.0 SDK</p> <p>.NET 6.0</p> <p>Mind the version! You need .NET SDK version 6.0 to solve these exercises.</p> <p>On Windows it might already be installed along with Visual Studio (see here how to check it); if not, use the link above to install (the SDK and not the runtime). You need to install it manually when using Linux or macOS.</p> </li> </ul> <p>Materials for preparing for this laboratory:</p> <ul> <li>MongoDB database system and the C# driver<ul> <li>Check the materials of Data-driven systems including the seminars</li> </ul> </li> <li>Official Microsoft tutorial for WebApi using MongoDB<ul> <li>We will not be creating a WebApi in this lab, but the Mongo part is the same.</li> </ul> </li> </ul>"},{"location":"Lab-MongoDB/#initial-steps","title":"Initial steps","text":"<p>Keep in mind that you are expected to follow the submission process.</p>"},{"location":"Lab-MongoDB/#create-and-check-out-your-git-repository","title":"Create and check out your Git repository","text":"<ol> <li> <p>Create your git repository using the invitation link in Moodle. Each lab has a different URL; make sure to use the right one!</p> </li> <li> <p>Wait for the repository creation to complete, then check out the repository.</p> <p>Password in the labs</p> <p>If you are not asked for credentials to log in to GitHub in university computer laboratories when checking out the repository, the operation may fail. This is likely due to the machine using someone else's GitHub credentials. Delete these credentials first (see here), then retry the checkout.</p> </li> <li> <p>Create a new branch with the name <code>solution</code> and work on this branch.</p> </li> <li> <p>Open the checked-out folder and type your Neptun code into the <code>neptun.txt</code> file. There should be a single line with the 6 characters of your Neptun code and nothing else in this file.</p> </li> </ol>"},{"location":"Lab-MongoDB/#create-the-database","title":"Create the database","text":"<p>Follow the steps in the seminar material to start the database server and initialize the database.</p>"},{"location":"Lab-MongoDB/#exercise-1-listing-and-modifying-products","title":"Exercise 1: Listing and modifying products","text":"<p>This exercise will implement CRUD (create, retrieve, update, delete) operations for <code>Product</code> entities.</p>"},{"location":"Lab-MongoDB/#open-the-visual-studio-solution","title":"Open the Visual Studio solution","text":"<p>Open the Visual Studio solution (the <code>.sln</code>) file in the checked-out repository. If Visual Studio tells you that the project is not supported, you need to install a missing component (see here).</p> <p>Do NOT upgrade any version</p> <p>Do not upgrade the project, the .NET version, or any NuGet package! If you see such a question, always choose no!</p> <p>You will need to work in class <code>Dal.Repository</code>! You can make changes to this class as long as the source code complies, the repository implements interface <code>mongolab.DAL.IRepository</code>, and the constructor accepts a single <code>IMongoDatabase</code> parameter.</p> <p>The database access is configured in class <code>Dal.MongoConnectionConfig</code>. If needed, you can change the database name in this file.</p> <p>Other parts of the application should NOT be modified!</p> <p>Razor Pages</p> <p>The web application is a so-called Razor Pages ASP.NET Core project. It includes a presentation layer rendered on the server using C# code and the Razor template. (You do not need to concern yourself with the UI.)</p>"},{"location":"Lab-MongoDB/#start-the-web-app","title":"Start the web app","text":"<p>Check if the web application starts.</p> <ol> <li> <p>Compile the code and start in Visual Studio.</p> </li> <li> <p>Open URL http://localhost:5000/ in a browser.</p> </li> </ol> <p>If everything was successful, you should see a page with links where you will be able to test your code. (The links will not work as the data access layer is not implemented yet.)</p>"},{"location":"Lab-MongoDB/#display-the-neptun-code-on-the-web-page","title":"Display the Neptun code on the web page","text":"<p>You will need to create screenshots that display your Neptun code.</p> <ol> <li> <p>Open file <code>Pages\\Shared\\_Layout.cshtml</code>. In the middle of the file, find the following section, and edit your Neptun code.</p> <pre><code>&lt;div class=\"container body-content\"&gt;\n@RenderBody()\n&lt;hr /&gt;\n&lt;footer&gt;\n&lt;p&gt;@ViewData[\"Title\"] - NEPTUN&lt;/p&gt;\n&lt;/footer&gt;\n&lt;/div&gt;\n</code></pre> </li> <li> <p>Compile the code and start the app again, then check the starting page. You should see the Neptune code at the bottom of the page.</p> <p></p> </li> </ol> <p>IMPORTANT</p> <p>The Neptun code is a mandatory requirement in the footer!</p>"},{"location":"Lab-MongoDB/#listing","title":"Listing","text":"<ol> <li> <p>First, you will need a way to access the <code>products</code> collection from C#. Create and initialize a new variable that represents the collection in class <code>Repository</code>. Use the injected <code>IMongoDatabase</code> variable to get the collection:</p> <pre><code>private readonly IMongoCollection&lt;Entities.Product&gt; _productCollection;\n\npublic Repository(IMongoDatabase database)\n{\nthis._productCollection = database.GetCollection&lt;Entities.Product&gt;(\"products\");\n}\n</code></pre> </li> <li> <p>You can use <code>_productCollection</code> to access the database's product records from now on. Let us start by implementing <code>ListProducts</code>. This will require two steps: first, to query the data from the database, then transform each record to an instance of <code>Models.Product</code>.</p> <p>The query is as follows:</p> <pre><code>var dbProducts = _productCollection\n.Find(_ =&gt; true) // listing all products hence an empty filter\n.ToList();\n</code></pre> <p>All items are then transformed.</p> <pre><code>return dbProducts\n.Select(t =&gt; new Product\n{\nId = t.Id.ToString(),\nName = t.Name,\nPrice = t.Price,\nStock = t.Stock\n})\n.ToList();\n</code></pre> </li> <li> <p>The implementation of <code>FindProduct(string id)</code> is similar, except for querying a single record by matching the <code>Id</code>. Pay attention to the fact that the <code>Id</code> is received as a string, but it needs converting to <code>ObjectId</code>.</p> <p>The transformation to the model remains identical. However, we should also handle when there is no matching record found and return a <code>null</code> value in this case (without converting anything to a model).</p> <p>The query is as follows:</p> <pre><code>var dbProduct = _productCollection\n.Find(t =&gt; t.Id == ObjectId.Parse(id))\n.SingleOrDefault();\n// ... model conversion\n</code></pre> <p>Note how the filter expression looks like! Also, note how the <code>ToList</code> is replaced with a <code>SingleOrDefault</code> call. This returns either the first (and single) element in the result set or <code>null</code> when there is none. This is a generic way of querying a single record from the database. You will need to write a similar code in further exercises.</p> <p>The conversion/transformation code is already given; however, we should prepare to handle when <code>dbProduct</code> is <code>null</code>. Instead of conversion, we should return <code>null</code> then.</p> </li> <li> <p>Test the behavior of these queries! Start the web application and go to http://localhost:5000 in a browser. Click <code>Products</code> to list the data from the database. If you click on <code>Details</code> it will show the details of the selected product.</p> </li> </ol> <p>If you do not see any product</p> <p>If you see no items on this page, but there is no error, it is most likely due to a misconfigured database access. MongoDB will not return an error if the specified database does not exist. See the instructions for changing the connection details above.</p>"},{"location":"Lab-MongoDB/#creation","title":"Creation","text":"<ol> <li> <p>Implement the method <code>InsertProduct(Product product)</code>. The input is an instance of <code>Models.Product</code> that collects the information specified on the UI.</p> </li> <li> <p>To create a new product, we will first create a new database entity (in memory first). This is an instance of class <code>Entities.Product</code>. There is no need to set the <code>Id</code> - the database will generate it. <code>Name</code>, <code>Price</code> and <code>Stock</code> are provided by the user. What is left is <code>Vat</code> and <code>CategoryId</code>. We should hard-code values here: create a new VAT entity and find a random category using Studio 3T and copy the <code>_id</code> value.</p> <pre><code>var dbProduct = new Entities.Product\n{\nName = product.Name,\nPrice = product.Price,\nStock = product.Stock,\nVat = new Entities.Vat\n{\nName = \"General\",\nPercentage = 20\n},\nCategoryId = ObjectId.Parse(\"5d7e4370cffa8e1030fd2d99\"),\n};\n_productCollection.InsertOne(dbProduct);\n</code></pre> <p>Once the database entity is ready, use <code>InsertOne</code> to add it to the database.</p> </li> <li> <p>To test your code, start the application and click the <code>Add new product</code> link on the products page. You will need to fill in the necessary data, and then the presentation layer will call your code.</p> </li> </ol>"},{"location":"Lab-MongoDB/#delete","title":"Delete","text":"<ol> <li> <p>Implement method <code>DeleteProduct(string id)</code>. Use <code>DeleteOne</code> on the collection to delete the record. You will need a filter expression here to find the matching record similarly to how it was done in <code>FindProduct(string id)</code>.</p> </li> <li> <p>Test the functionality using the web application by clicking the <code>Delete</code> link next to a product.</p> </li> </ol>"},{"location":"Lab-MongoDB/#modification","title":"Modification","text":"<ol> <li> <p>We will implement the method <code>bool SellProduct(string id, int amount)</code> as a modification operation. The method shall return <code>true</code> if a record with a matching <code>id</code> is found, and there are at least <code>amount</code> pieces in stock. If the product is not found or there is not enough in stock return <code>false</code>.</p> </li> <li> <p>Using the atomicity guarantees of MongoDB, we will perform the changes in a single step. A filter will be used to find both the <code>id</code> and check if there are enough items in stock. A modification will decrease the stock only if the filter is matched.</p> <pre><code>var result = _productCollection.UpdateOne(\nfilter: t =&gt; t.Id == ObjectId.Parse(id) &amp;&amp; t.Stock &gt;= amount,\nupdate: Builders&lt;Entities.Product&gt;.Update.Inc(t =&gt; t.Stock, -amount),\noptions: new UpdateOptions { IsUpsert = false });\n</code></pre> <p>Note that the <code>UpdateOptions</code> is used to signal that we do NOT want as upsert operation; instead, we want the operation to do nothing when the filter is not matched.</p> <p>The modification is assembled using <code>Update</code> in <code>Builders</code>. Here we want to decrease the stock value with <code>amount</code> (which is, effectively, an increase with <code>-amount</code>).</p> <p>We can determine what happened based on the <code>result</code> returned by the update operation. If the result indicates that the filter matched a record and the modification was performed, return <code>true</code>. Otherwise, return <code>false</code>.</p> <pre><code>return result.MatchedCount &gt; 0;\n</code></pre> </li> <li> <p>Test the functionality using the web application by clicking the <code>Buy</code> link next to a product. Verify the behavior when you enter a too large amount!</p> </li> </ol> <p>SUBMISSION</p> <p>Create a screenshot of the web page listing the products after successfully adding at least one new product. Save the screenshot as <code>f1.png</code> and submit it with the other files of the solution. The screenshot shall display the list of products. Verify that your Neptun code is visible on the image at the bottom of the page! The screenshot is required to earn the points.</p>"},{"location":"Lab-MongoDB/#exercise-2-listing-categories","title":"Exercise 2: Listing categories","text":"<p>We will be listing available categories here with the number of products in each category. We will need an aggregation pipeline here. Continue working in class <code>Dal.Repository</code>.</p> <p>The method you should implement is <code>IList&lt;Category&gt; ListCategories()</code>. The method shall return all categories. Class <code>Models.Category</code> has 3 members.</p> <ul> <li><code>Name</code>: the name of the category</li> <li><code>ParentCategoryName</code>: the name of the parent category. If there is no parent, the value should be <code>null</code>.</li> <li><code>NumberOfProducts</code>: number of products in this category. If there are no products, the value should be 0.</li> </ul> <p>The outline of the solution is as follows.</p> <ol> <li> <p>Create and initialize a new <code>_productCollection</code> similar to how <code>_categoryCollection</code> is initialized. The name of the collection is <code>categories</code> - you can verify this using Studio 3T.</p> </li> <li> <p><code>ListCategories()</code> should first query all categories. Perform this similarly to how it was done in the previous exercise. Store the result set in variable <code>dbCategories</code>.</p> </li> <li> <p>Query the number of products associated with each category (<code>Product.CategoryId</code>). Use an aggregation pipeline and a <code>$group</code> step as follows.</p> <pre><code>var productCounts = _productCollection\n.Aggregate()\n.Group(t =&gt; t.CategoryID, g =&gt; new { CategoryID = g.Key, NumberOfProducts = g.Count() })\n.ToList();\n</code></pre> <p>This query yields a list where each item has a <code>CategoryID</code> and the number of associated products.</p> </li> <li> <p>We have all information we need: all categories (including the parents) and the number of products for each. The final step is to \"merge\" the results in C# code.</p> <pre><code>return dbCategories\n.Select(k =&gt; new Category\n{\nName = k.Name,\nParentCategoryName = k.ParentCategoryId.HasValue\n? dbCategories.Single(p =&gt; p.Id == k.ParentCategoryId.Value).Name\n: null,\nNumberOfProducts = productCounts.SingleOrDefault(pc =&gt; pc.CategoryID == k.Id)?.NumberOfProducts ?? 0\n})\n.ToList();\n</code></pre> <p>As seen above, this is performed using LINQ.</p> <p>Join with MongoDB</p> <p>This is not the only solution to \"join\" collections in MongoDB. Although there is no <code>join</code> operation, there are ways to query data across collections. Instead of doing this in MongoDB, we do the merging in C# as above. This would not be good if the data set were large. Also, if there were filtering involved, the code above would be much more complicated.</p> </li> <li> <p>Use the <code>Categories</code> link of the website to test your solution. This will list the data provided by your code in a tabular format. You can use the <code>Add new product</code> functionality from before to create new products. This must result in an increase in the number of products in one of the categories. (Remember that inserting the product hard-coded a category ID.)</p> </li> </ol> <p>SUBMISSION</p> <p>Create a screenshot of the web page listing the categories. Save the screenshot as <code>f2.png</code> and submit it with the other files of the solution. The screenshot shall display the list of categories. Verify that your Neptun code is visible on the image at the bottom of the page! The screenshot is required to earn the points.</p>"},{"location":"Lab-MongoDB/#exercise-3-querying-and-modifying-orders","title":"Exercise 3: Querying and modifying orders","text":"<p>In this exercise, we will implement CRUD (create, retrieve, update, delete) operations for <code>Order</code> entities. This exercise is similar to the previous one; feel free to look back to the solutions of that exercise.</p> <p>The properties of <code>Model.Order</code> are:</p> <ul> <li><code>Id</code>: the <code>Id</code> of the database serialized using <code>ToString</code></li> <li><code>Date</code>, <code>Deadline</code>, <code>Status</code>: taken from the database directly</li> <li><code>PaymentMethod</code>: taken from the <code>Method</code> field of the <code>PaymentMethod</code> complex entity</li> <li><code>Total</code>: the cumulative sum of the product of <code>Amount</code> and <code>Price</code> for all items associated with this order (<code>OrderItems</code>)</li> </ul> <p>You will need to implement the management methods related to orders: <code>ListOrders</code>, <code>FindOrder</code>, <code>InsertOrder</code>, <code>DeleteOrder</code>, and <code>UpdateOrder</code>.</p> <p>Before starting the tasks below, do not forget to add and initialize an <code>_orderCollection</code> in the repository class similar to the other one.</p>"},{"location":"Lab-MongoDB/#listing_1","title":"Listing","text":"<ol> <li> <p>Method <code>ListOrders</code> receives a <code>string status</code> parameter. If this value is empty or <code>null</code> (see: <code>string.IsNullOrEmpty</code>) list all orders. Otherwise, list orders where the <code>Status</code> field is identical to the <code>status</code> received as a parameter.</p> </li> <li> <p>Method <code>FindOrder</code> returns the data of a single order identified by <code>string id</code>. If no record with the same <code>ID</code> exists, this method shall return <code>null</code>.</p> </li> </ol>"},{"location":"Lab-MongoDB/#creation_1","title":"Creation","text":"<ol> <li> <p>Implement the method <code>InsertOrder</code>. The following information is provided to create the new order: <code>Order order</code>, <code>Product product</code>, and <code>int amount</code>.</p> </li> <li> <p>You need the set the following information in the database entity:</p> <ul> <li><code>CustomerId</code>, <code>SiteId</code>: find a chosen <code>Customer</code> in the database and copy the values from this record from fields <code>_id</code> and <code>mainSiteId</code>. Hard-wire these values in code.</li> <li><code>Date</code>, <code>Deadline</code>, <code>Status</code>: take these values from the value received as <code>order</code> parameter</li> <li><code>PaymentMethod</code>: create a new instance of <code>PaymentMethod</code>. The <code>Method</code> should be <code>PaymentMethod</code> from the object received through the <code>order</code> parameter. Leave <code>Deadline</code> as <code>null</code>.</li> <li><code>OrderItems</code>: create a single item here with the following data:<ul> <li><code>ProductId</code> and <code>Price</code>: take the values from the parameter <code>product</code></li> <li><code>Amount</code>: copy value from the method parameter <code>amount</code></li> <li><code>Status</code>: equals to the <code>Status</code> field of parameter <code>order</code></li> </ul> </li> <li>other fields (related to invoicing) should be left as <code>null</code>!</li> </ul> </li> </ol>"},{"location":"Lab-MongoDB/#delete_1","title":"Delete","text":"<p><code>DeleteOrder</code> should delete the record specified by the <code>Id</code>.</p>"},{"location":"Lab-MongoDB/#modification_1","title":"Modification","text":"<p>When updating the record in <code>UpdateOrder</code>, only update the information present in <code>Models.Order</code>: <code>Date</code>, <code>Deadline</code>, <code>Status</code>, and <code>PaymentMethod</code>. Ignore the value <code>Total</code>; it does not need to be considered in this context.</p> <p>Hint</p> <p>You can combine multiple updates using <code>Builders&lt;Entities.Order&gt;.Update.Combine</code>.</p> <p>Keep in mind that the <code>IsUpsert</code> property should be set to <code>false</code> in the update!</p> <p>The method should return <code>true</code> if there were a record with a matching <code>ID</code>.</p>"},{"location":"Lab-MongoDB/#testing","title":"Testing","text":"<p>You can test the functionalities using the <code>Orders</code> link in the test web app. Verify the behavior of <code>Filter</code>, <code>Add new order</code>, <code>Edit</code>, <code>Details</code>, and <code>Delete</code> too!</p> <p>SUBMISSION</p> <p>Create a screenshot of the web page listing the orders after successfully adding at least one new order. Save the screenshot as <code>f3.png</code> and submit it with the other files of the solution. The screenshot shall display the list of orders. Verify that your Neptun code is visible on the image at the bottom of the page! The screenshot is required to earn the points.</p>"},{"location":"Lab-MongoDB/#exercise-4-listing-customers","title":"Exercise 4: Listing customers","text":"<p>We will list the customers in this exercise, along with the cumulative value of their orders. This will be similar to exercise 2: we will use aggregation and merging in C# code.</p> <p>The method to implement is <code>IList&lt;Customer&gt; ListCustomers()</code>. The method shall return every customer. The properties of <code>Model.Customer</code> are:</p> <ul> <li><code>Name</code>: the name of the customer</li> <li><code>ZipCode</code>, <code>City</code>, <code>Street</code>: the address fields of the main site of the customer</li> <li><code>TotalOrders</code>: the cumulative total of all orders of the customer. You have to aggregate the price*amount for each order of a customer to get this total. If a particular customer has no orders, this value shall be <code>null</code>.</li> </ul> <p>Follow these steps to solve this exercise:</p> <ol> <li> <p>Create and initialize the <code>_customerCollection</code>.</p> </li> <li> <p>List all customers. The customer entity has the list of <code>Sites</code>; the main site is the item <code>MainSiteId</code> points to. Use this value to find the main in among the list.</p> </li> <li> <p>In the collection of the orders, use an aggregation pipeline to calculate the total of all orders for each <code>CustomerId</code>.</p> </li> <li> <p>Finally, you need the \"merge\" the two result sets. Every customer has a main site; however, not all of them have orders (in which case <code>TotalOrders</code> shall be <code>null</code>).</p> </li> <li> <p>Use the <code>Customers</code> link of the website to test your solution. This will list the data provided by your code in a tabular format. You can use the <code>Add new order</code> functionality from before to create new orders. This must result in an increase in the total for one of the customers.</p> </li> </ol> <p>SUBMISSION</p> <p>Create a screenshot of the web page listing the customers. Save the screenshot as <code>f4.png</code> and submit it with the other files of the solution. The screenshot shall display the list of customers. Verify that your Neptun code is visible on the image at the bottom of the page! The screenshot is required to earn the points.</p>"},{"location":"Lab-MongoDB/#exercise-5-optional-exercise","title":"Exercise 5: Optional exercise","text":"<p>(In the evaluation, you will see the text \"imsc\" in the exercise title; this is meant for the Hungarian students. Please ignore that.)</p> <p>We will group the orders in this exercise by date. We would like to see how our company performs by comparing the sales across time. We will use a <code>$bucket</code> aggregation.</p>"},{"location":"Lab-MongoDB/#requirements","title":"Requirements","text":"<p>The method to implement is <code>OrderGroups GroupOrders(int groupsCount)</code>. This operation shall group the orders into <code>groupsCount</code> equal date ranges. The return value contains two values:</p> <ul> <li><code>IList&lt;DateTime&gt; Thresholds</code>: The threshold dates of the date ranges.<ul> <li>The lower bound of the interval is inclusive, while the upper bound is exclusive.</li> <li>When having <code>n</code> intervals, the <code>Thresholds</code> list has <code>n + 1</code> items</li> <li>E.g.: Let the <code>Thresholds</code> be <code>a, b, c, d</code>; the intervals shall then be: <code>[a, b[</code>, <code>[b, c[</code> and <code>[c, d[</code>.</li> </ul> </li> <li><code>IList&lt;OrderGroup&gt; Groups</code>: The groups that fall into each date range. The properties of <code>OrderGroup</code> are:<ul> <li><code>Date</code>: The start date of the interval. E.g., for the interval <code>[a, b[</code> the value is<code>a</code>.</li> <li><code>Pieces</code>: The number of orders within the interval.</li> <li><code>Total</code>: The cumulative sum of the values of orders within this interval.</li> </ul> </li> </ul> <p>Further requirements:</p> <ol> <li>There should be exactly <code>groupsCount</code> intervals.<ul> <li>The number of items in <code>Thresholds</code> will be exactly <code>groupsCount + 1</code>.</li> <li>The number of items in <code>Groups</code> is at most <code>groupsCount</code> \u2014 no need for an item for intervals with no orders</li> </ul> </li> <li>The lower boundary should be the earliest date in the database</li> <li>The upper boundary should be the latest date in the database + 1 hour<ul> <li>This is needed because the upper boundary is exclusive. It ensures that every item in the database falls into one of the intervals.</li> <li>Tip: add one hour to a date: <code>date.AddHours(1)</code>.</li> </ul> </li> <li>The intervals should be of equal size<ul> <li>Tip: C# has built-in support for date arithmetic using dates (<code>DateTime</code>) and duration (<code>TimeSpan</code>) classes.</li> </ul> </li> </ol> <p>You can assume the following:</p> <ul> <li>All orders in the database have <code>Date</code> values even though the type is nullable (<code>DateTime?</code>).<ul> <li>You can use <code>date.Value</code> to get the date without checking <code>date.HasValue</code>.</li> </ul> </li> <li><code>groupsCount</code> is a positive integer greater than or equal to 1.</li> </ul>"},{"location":"Lab-MongoDB/#draft-solution","title":"Draft solution","text":"<ol> <li> <p>Get the earliest and latest order dates from the database.</p> <ul> <li>Tip: You can execute two queries to get the values or a single aggregation.</li> </ul> </li> <li> <p>Calculate the interval boundaries according to the requirements.</p> <ul> <li>This will yield the <code>Thresholds</code> list for the return value.</li> </ul> </li> <li> <p>Execute a <code>$bucket</code> aggregation on the orders collection. See the documentation here.</p> <ul> <li>the <code>groupBy</code> expression will be the date of the order</li> <li><code>boundaries</code> expects the values as stated in the requirements; the list assembled in the previous step will work just fine</li> <li><code>output</code> should calculate the count and total value</li> </ul> <p>Tip</p> <p>If you receive an error message <code>\"Element '...' does not match any field or property of class...\"</code> then in the <code>output</code> expression, change every property to lowercase (e.g., <code>Pieces</code> -&gt; <code>pieces</code>). It seems that the Mongo C# driver does not perform the required name transformations here.</p> </li> <li> <p>The <code>$bucket</code> aggregation will yield the intervals according to the specification. You will only need to transform the results into instances of <code>OrderGroup</code> and produce the return value.</p> </li> <li> <p>Use the <code>Group orders</code> link of the website to test your solution. A diagram will display the calculated information. Test your solution by changing the number of groups and adding orders in the past using the previously implemented <code>Add new order</code> functionality.</p> </li> </ol> <p>SUBMISSION</p> <p>Create a screenshot of the web page displaying the diagram. Save the screenshot as <code>f5.png</code> and submit it with the other files of the solution. The screenshot shall show both diagrams (you may need to zoom out in the browser to fit them). Verify that your Neptun code is visible on the image at the bottom of the page! The screenshot is required to earn the points.</p>"},{"location":"Lab-QueryOptimization/","title":"Query optimization","text":"<p>We will examine the query optimization behavior of Microsoft SQL Server. To properly understand the optimizer's behavior, in the first 5 exercises, we will explain the queries and the behavior too. The rest of the exercises is individual work where it is your task to infer the reason for a specific plan. Your task is to document the behavior and submit the documentation of all exercises.</p>"},{"location":"Lab-QueryOptimization/#pre-requisites-and-preparation","title":"Pre-requisites and preparation","text":"<p>Required tools to complete the tasks:</p> <ul> <li>Windows, Linux, or macOS: All tools are platform-independent, or a platform-independent alternative is available.</li> <li>Microsoft SQL Server<ul> <li>The free Express version is sufficient, or you may also use localdb installed with Visual Studio</li> <li>A Linux version is also available.</li> <li>On macOS, you can use Docker.</li> </ul> </li> <li>Visual Studio Code or any other tool for writing markdown</li> <li>SQL Server Management Studio, or you may also use the platform-independent Azure Data Studio is</li> <li>Database initialization script: mssql.sql</li> <li>GitHub account and a git client</li> </ul> <p>Materials for preparing for this laboratory:</p> <ul> <li>Markdown introduction and detailed documentation</li> <li>Using Microsoft SQL Server: description and video</li> <li>The schema of the database</li> <li>Microsoft SQL Server query optimization<ul> <li>Check the materials of Data-driven systems</li> </ul> </li> </ul>"},{"location":"Lab-QueryOptimization/#initial-steps","title":"Initial steps","text":"<p>Keep in mind that you are expected to follow the submission process.</p>"},{"location":"Lab-QueryOptimization/#create-and-check-out-your-git-repository","title":"Create and check out your Git repository","text":"<ol> <li> <p>Create your git repository using the invitation link in Moodle. Each lab has a different URL; make sure to use the right one!</p> </li> <li> <p>Wait for the repository creation to complete, then check out the repository.</p> <p>If you are not asked for credentials to log in to GitHub in university computer laboratories when checking out the repository, the operation may fail. This is likely due to the machine using someone else's GitHub credentials. Delete these credentials first (see here), then retry the checkout.</p> </li> <li> <p>Create a new branch with the name <code>solution</code> and work on this branch.</p> </li> <li> <p>Open the checked-out folder and type your Neptun code into the <code>neptun.txt</code> file. There should be a single line with the 6 characters of your Neptun code and nothing else in this file.</p> </li> </ol>"},{"location":"Lab-QueryOptimization/#open-the-markdown-file","title":"Open the markdown file","text":"<p>Create the documentation in a markdown file. Open the checked-out git repository with a markdown editor. We recommend using Visual Studio Code:</p> <ol> <li> <p>Start VS Code.</p> </li> <li> <p>Use File &gt; Open Folder... to open the git repository folder.</p> </li> <li> <p>In the folder structure on the left, find <code>README.md</code> and double click to open.</p> </li> <li> <p>Edit this file.</p> </li> <li> <p>When you create a screenshot, put the file in this directory next to the other files. This will enable you to use the file name to include the image.</p> <p>File name: lowercase English alphabet only</p> <p>You should avoid using special characters in the file names. Best if you use the English alphabet and no spaces either. The various platforms and git handle filenames differently. GitHub's web interface will only render the documentation with the images correctly if you only use all lowercase filenames with the English alphabet and no spaces.</p> </li> <li> <p>For convenient editing open the preview (Ctrl-K + V).</p> </li> </ol> <p>Alternative editor</p> <p>If you do not like VS code, you can also use the GitHub web interface to edit the markdown; you also have a preview here. File upload will be trickier.</p>"},{"location":"Lab-QueryOptimization/#create-the-database","title":"Create the database","text":"<ol> <li> <p>Connect to Microsoft SQL Server using SQL Server Management Studio. Start Management Studio and use the following connection details:</p> <ul> <li>Server name: <code>(localdb)\\mssqllocaldb</code> or <code>.\\sqlexpress</code> (which is short for: <code>localhost\\sqlexpress</code>)</li> <li>Authentication: <code>Windows authentication</code></li> </ul> </li> <li> <p>Create a new database (if it does not exist yet). The name should be your Neptun code: in Object Explorer right-click Databases and choose Create Database.</p> </li> <li> <p>Create the sample database by executing the initializer script Open a new Query window, paste the script into the window, then execute it. Make sure to select the correct database in the toolbar dropdown.</p> <p></p> </li> <li> <p>Verify that the tables are created. If the Tables folder was open before, you need to refresh it.</p> <p>.</p> </li> </ol>"},{"location":"Lab-QueryOptimization/#getting-the-actual-execution-plan","title":"Getting the actual execution plan","text":"<p>If you are not using Windows</p> <p>We are primarily using SQL Server Management Studio to get the execution plans. If you are not using Windows, you can also use Azure Data Studio-t to obtain the query plan.</p> <p>We will check the query plan the optimizer chose and the server executed in the following exercises. In SQL Server Management Studio, open the Query menu and check Include Actual Execution Plan.</p> <p></p> <p>The plan will be displayed after the query is completed at the bottom of the window on the Execution plan pane.</p> <p></p> <p>The plan is a data flow diagram where the query execution is the flow of the data. The items are the individual steps, and the percentages are the relative cost of each step with regards to the whole query.</p>"},{"location":"Lab-QueryOptimization/#exercises-solved-together","title":"Exercises solved together","text":"<p>SUBMISSION</p> <p>The submission shall be a documentation written in the <code>README.md</code> file:</p> <ul> <li>document the SQL commands (if the exercise tells you to),</li> <li>a screenshot of the query plan (just the plan and not the entire desktop!),</li> <li>and an explanation: what do you see on the query plan and why the system chose this option.</li> </ul> <p>The documentation should correctly display with the images in the web interface of GitHub! You need to verify this during the submission: open the repository in the browser and switch to your branch; GitHub will automatically render the <code>README.md</code> file with the images.</p> <p>Submit your own work</p> <p>Even though the solutions are provided below, you are required to execute the queries, get the execution plan, think about it, and document it with your own words. Copying the explanations from below is not acceptable!</p> <p>If the query plan or the explanation of subsequent exercises is the same, or at least very similar, it is enough to document everything once (one screenshot and one reasoning); and list which (sub)exercises it is the solution for.</p>"},{"location":"Lab-QueryOptimization/#exercise-1-2p","title":"Exercise 1 (2p)","text":"<p>Drop the <code>CustomerSite</code> =&gt; <code>Customer</code> foreign key and the <code>Customer</code> table primary key constraint. Find these in the Object Explorer and delete them (the PK... is the primary key while the FK... is the foreign key - the ones you need to delete are in two different tables!):</p> <p></p> <p>Execute the following queries on the <code>Customer</code> table and examine the execution plans (always fetch the entire records using <code>select *</code>):</p> <ul> <li>a) query the whole table</li> <li>b) get one record based on primary key</li> <li>c) querying records where the primary key is not a specified constant (use the <code>&lt;&gt;</code> comparison operation for not equals)</li> <li>d) querying records where the primary key is greater than a specified constant</li> <li>e) querying records where the primary key is greater than a specified constant, ordering by ID descending  </li> </ul> <p>Document the SQL commands you used and explain the actual query execution plan!</p> Solution <p>The SQL queries:</p> <ul> <li>a) <code>select * from customer</code></li> <li>b) <code>select * from customer where id = 1</code></li> <li>c) <code>select * from customer where id &lt;&gt; 1</code></li> <li>d) <code>select * from customer where id &gt; 1</code></li> <li>e) <code>select * from customer where id &gt; 1 order by id desc</code></li> </ul> <p>a)-d)</p> <p>The execution plan is indentical for all, it uses a table scan each time:</p> <p></p> <p>Explanation: the optimizer cannot use any index, as there is none. Thus there is no other choice but to use a table scan.</p> <p>e)</p> <p>This one is a little different due to the order by there is a sort stage too.</p> <p></p> <p>Explanation: The table scan is the same, and after that, there is still a need for sorting - without any index, it is a separate stage.</p>"},{"location":"Lab-QueryOptimization/#exercise-2-2p","title":"Exercise 2 (2p)","text":"<p>Re-create the primary key of the <code>Customer</code> table:</p> <ul> <li>Right-click the table &gt; Design &gt; then right-click the ID column \"Set Primary Key \" then Save,</li> <li>or execute <code>ALTER TABLE [dbo].[Customer] ADD PRIMARY KEY CLUSTERED ([ID] ASC)</code></li> </ul> <p>Re-run the same queries as in the previous exercise. What do you experience?</p> Solution <p>The commands are the same as before.</p> <p>a)</p> <p></p> <p>The Clustered Index Scan iterates the table. We have a Clustered Index automatically created for the primary key, which has the records sorted by ID. By iterating through this index, all records are visited. This is almost identical to a Table Scan, though, not efficient. However, this is what we asked for here.</p> <p>b)</p> <p></p> <p>A Clustered Index Seek is enough. Since the filter criteria is for the ID, for which there is an index available, the matching record can be found quickly. This is an efficient plan; the Clustered Index is used for the exact purpose we created it for.</p> <p>c)</p> <p>Similar to the previous one, a Clustered Index Seek between two intervals (<code>&lt; constant</code>, <code>&gt; constant</code>). Since the filter criteria still references the ID field with a Clustered Index, the query will use this index. This is an efficient query.</p> <p>d)</p> <p>Very similar to the previous one with a range filter.</p> <p>e)</p> <p></p> <p>Clustered Index Seek with a backward seek order. The Properties window shows the Seek Order-t: find the last matching record, and walk the index backward, which will yield a sorted result set.</p>"},{"location":"Lab-QueryOptimization/#exercise-3-2p","title":"Exercise 3 (2p)","text":"<p>Execute the following queries on the <code>Product</code> table.</p> <ul> <li>f) query the whole table</li> <li>g) search for specific records where <code>Price</code> equals a value</li> <li>h) query records where <code>Price</code> is not a specified constant (&lt;&gt;)</li> <li>i) query records where <code>Price</code> is greater than a value</li> <li>j) query records where <code>Price</code> is greater than a value, ordered by <code>Price</code> descending</li> </ul> <p>Document the SQL commands you used and explain the actual query execution plan!</p> Solution <p>The SQL commands:</p> <ul> <li>f) <code>select * from product</code></li> <li>g) <code>select * from product where price = 800</code></li> <li>h) <code>select * from product where price &lt;&gt; 800</code></li> <li>i) <code>select * from product where price &gt; 800</code></li> <li>j) <code>select * from product where price &gt; 800 order by price desc</code></li> </ul> <p>f)-i)</p> <p></p> <p>A Clustered Index Scan iterates through the contents of the index. This is still equal to reading the entire table since there is no index to match the filter criteria. Although a Clustered Index is used, it does not serve any purpose in filtering; all records are visited, and the filter is evaluated for each. These are not efficient queries, as the existing index is of no use.</p> <p>j)</p> <p></p> <p>Still a Clustered Index Scan, but what is interesting is that cost of the sorting stage is quite large. Even after executing a costly Index Scan, we still have further sorting to do. A good index would help, but there is no index for the sorted column.</p>"},{"location":"Lab-QueryOptimization/#exercise-4-2p","title":"Exercise 4 (2p)","text":"<p>Add a new non-clustered index on column <code>Price</code>. How do the execution plans change?</p> <p>To add the index use Object Explorer, find the table, expand it, and right-click Indexes -&gt; New index &gt; Non-Clustered Index...</p> <p></p> <p>Indices should have meaningful names, e.g., <code>IX_Tablename_Fieldname</code>. Add Price column to the Index key columns list.</p> <p></p> <p>Repeat the queries from the previous exercise and explain the plans!</p> Solution <p>The SQL commands are the same as in the previous exercise.</p> <p>f)</p> <p>Despite the new index, it is still an Index Scan - since we asked for the contents of the entire table.</p> <p>g)-i)</p> <p>Clustered Index Scan iterating through the entire table, just as if there was no index available for the filtered column.</p> <p>Why does it not use the new index? The reason is the projection; that is, we query the entire record. The NonClustered Index could yield a set of record identifiers, after which the records themselves would still need to be queried. The optimizer decides that it is not worth doing so; an Index Scan is more efficient.</p> <p>j)</p> <p></p> <p>The NonClustered Index Seek yields keys, which are looked up in the Clustered Index, just like joining the two indices.</p> <p>We would have expected something similar in the previous queries too. The Clustered Index is needed as entire records are fetched as the NonClustered Index only provides references. However, these references are in the correct order (the NonClustered Index ensures it); so after the lookup in the Clustered Index, there is no further need to do the sorting. If only the Clustered Index were used (Clustered Index Scan), the sorting would have to be performed in a separate stage. This is an acceptable query, as the NonClustered Index helps in avoiding a costly sorting step.</p>"},{"location":"Lab-QueryOptimization/#exercise-5-2p","title":"Exercise 5 (2p)","text":"<p>Generate new records into the Product table with the script below. How do the execution plans change?</p> <p>When repeating the query for sub-exercise i), choose a constant value that will yield few resulting records, then choose a value that returns almost all records. Explain the differences!</p> <pre><code>SELECT TOP (1000000) n = ABS(CHECKSUM(NEWID()))\nINTO dbo.Numbers\nFROM sys.all_objects AS s1 CROSS JOIN sys.all_objects AS s2\nOPTION (MAXDOP 1);\n\nCREATE CLUSTERED INDEX n ON dbo.Numbers(n)\n;\n\n\nINSERT INTO Product(Name, Price, Stock, VATID, CategoryID)\nSELECT 'Apple', n%50000, n%100, 3, 13\nFROM Numbers\n</code></pre> Solution <p>The SQL commands are the same.</p> <p>f)</p> <p>Same as before.</p> <p>g)</p> <p></p> <p>References from the NonClustered Index Seek are looked up in the Clustered Index, just like joining the two indices.</p> <p>Let us compare this plan to the one from before having a smaller table. Why is the Clustered Index Scan not used now? In the case of larger tables, the selectivity (i.e., how many records match the filtering) is more important, hence the use of the NonClustered Index. The Clustered Index Scan would be too costly in a large table. The NonClustered Index can reduce the number of records, hence its role here. Based on the statistics of the <code>Price</code> column, it can be derived that the <code>=</code> operator will match few records. Important! Just because it is an <code>=</code> comparison, it does not directly follow that there are few matches; imagine the column having the same value in all records. Hence the need for the statistics!</p> <p>This is an acceptable query. Since the filtering reduces the number of records, it is worth using the index.</p> <p>h)</p> <p></p> <p>Clustered Index Scan as before.</p> <p>Why the difference compared to the previous case? If the <code>=</code> operator yields few matches, then <code>&lt;&gt;</code> will yield many. This is derived from the statistics too. So no use in doing the same as in the previous case; a Clustered Index Scan is probably more efficient.</p> <p>i)</p> <p>The plan depends on the constant. If it yields few matches, similar to g); otherwise the same as in h).</p> <p>j)</p> <p>Just like for g). Does the <code>order by desc</code> matter here? The optimizer tries to avoid sorting, and this is the only way to do so. This is an acceptable plan; by using the NonClustered Index there is no separate sorting stage.</p>"},{"location":"Lab-QueryOptimization/#individual-exercises","title":"Individual exercises","text":"<p>SUBMISSION</p> <p>Continue documenting the results the same way.</p> <p>Keep in mind that the documentation should correctly display with the images in the web interface of GitHub! You need to verify this during the submission: open the repository in the browser and switch to your branch; GitHub will automatically render the <code>README.md</code> file with the images.</p>"},{"location":"Lab-QueryOptimization/#exercise-6-1p","title":"Exercise 6 (1p)","text":"<p>Repeat the queries on the <code>Product</code> table, but instead of fetching the entire record, only get the <code>ID</code> and the <code>Price</code> columns. How do the execution plans change? Explain the differences!</p>"},{"location":"Lab-QueryOptimization/#exercise-7-1p","title":"Exercise 7 (1p)","text":"<p>Analyze the following queries executed on the <code>Product</code> table:</p> <ul> <li>k) query records where the primary key is between two values (use the <code>BETWEEN</code> operator)</li> <li>l) query records where the primary key is between two values (use the <code>BETWEEN</code> operator), or it is equal to a value that falls outside of this range</li> </ul> <p>Document the SQL commands you used and explain the actual query execution plan!</p>"},{"location":"Lab-QueryOptimization/#exercise-8-1p","title":"Exercise 8 (1p)","text":"<p>In exercise 6, <code>WHERE Price=</code> compared an integer and a floating-point number. Let us experiment with other comparisons: query records from the <code>Product</code> table with the following filter criteria.</p> <ul> <li>m) <code>where cast(Price as int) = integer number</code></li> <li>n) <code>where Price BETWEEN integer number-0.0001 AND integer number+0.0001</code></li> </ul> <p>Choose a random integer number in these queries and fetch only the primary key. Analyze the execution plans.</p>"},{"location":"Lab-QueryOptimization/#exercise-9-1p","title":"Exercise 9 (1p)","text":"<p>Analyze the following queries execute on the <code>Product</code> table:</p> <ul> <li>o) query entire records where <code>Price</code> is less than a constant value (the filter should yield few matches), ordered by ID descending</li> <li>p) the same, but fetch only <code>ID</code> and <code>Price</code></li> <li>q) query entire records where <code>Price</code> is greater than a constant value (the filter should yield many matches), ordered by ID descending</li> <li>r) the same, but fetch only <code>ID</code> and <code>Price</code></li> </ul> <p>Document the SQL commands you used and explain the actual query execution plan!</p>"},{"location":"Lab-QueryOptimization/#exercise-10-1p","title":"Exercise 10 (1p)","text":"<p>Create a new index for the <code>Name</code> column and analyze the following queries executed on the <code>Product</code> table:</p> <ul> <li>s) query names and IDs where the name begins with B - use function <code>SUBSTRING</code></li> <li>t) the same, but now using <code>LIKE</code></li> <li>u) query names and IDs where the name contains a B (LIKE)</li> <li>v) query the ID of a product where the name equals (=) a string</li> <li>w) the same, but now compare case-insensitively using <code>UPPER</code></li> </ul> <p>Document the SQL commands you used and explain the actual query execution plan!</p>"},{"location":"Lab-QueryOptimization/#exercise-11-1p","title":"Exercise 11 (1p)","text":"<p>Analyze the following queries executed on the <code>Product</code> table:</p> <ul> <li>x) get the maximum of <code>Id</code></li> <li>y) get the minimum of <code>Price</code></li> </ul> <p>Document the SQL commands you used and explain the actual query execution plan!</p>"},{"location":"Lab-QueryOptimization/#exercise-12-1p","title":"Exercise 12 (1p)","text":"<p>Query the number of products per category (<code>CategoryId</code>).</p> <p>Document the SQL commands you used and explain the actual query execution plan!</p>"},{"location":"Lab-QueryOptimization/#exercise-13-1p","title":"Exercise 13 (1p)","text":"<p>How could we improve on the performance of the previous query? Explain and implement the solution and repeat the previous query.</p> <p>Tip</p> <p>You need to add a new index. The question is: to which column?</p>"},{"location":"Lab-QueryOptimization/#exercise-14-1p","title":"Exercise 14 (1p)","text":"<p>List the <code>Name</code> of each <code>Product</code> where <code>CategoryId</code> equals 2.</p> <p>Document the SQL commands you used and explain the actual query execution plan! Explain whether the index added in the previous exercises helps the performance.</p>"},{"location":"Lab-QueryOptimization/#exercise-15-1p","title":"Exercise 15 (1p)","text":"<p>Improve the performance of the previous query. Extend the index added before by including the name: right-click the index -&gt; Properties -&gt; and add <code>Name</code> to Included columns.</p> <p>Repeat the previous query and analyze the plan.</p>"},{"location":"Lab-QueryOptimization/#optional-exercises","title":"Optional exercises","text":"<p>You can earn an additional +3 points with the completion of this exercise.</p>"},{"location":"Lab-QueryOptimization/#exercise-16","title":"Exercise 16","text":"<p>Compare the following <code>Invoice</code>-<code>InvoiceItem</code> query: for each invoice item get the customer name.</p> <pre><code>SELECT CustomerName, Name\nFROM Invoice JOIN InvoiceItem ON Invoice.ID = InvoiceItem.InvoiceID\n</code></pre> <p>Which join strategy was chosen? Explain why the system chose it!</p>"},{"location":"Lab-QueryOptimization/#exercise-17","title":"Exercise 17","text":"<p>Compare the various JOIN strategies when querying all <code>Product</code>-<code>Category</code> record pairs.</p> <p>Tip</p> <p>Use query hints or the option command to explicitly specify the join strategy.</p> <p>Put the 3 queries (each with a different join strategy) into one execution unit (execute them together). This will give you the relative cost of each option.</p> <p>Document the SQL commands you used and explain the actual query execution plan!</p>"},{"location":"Lab-ReportingServices/","title":"Reporting Services","text":"<p>In this lab, we will work with Microsoft SQL Server Reporting Services, a tool we have not seen before. We will start working together, then some of the exercises will be individual work. You shall submit the solution to all exercises.</p>"},{"location":"Lab-ReportingServices/#pre-requisites-and-preparation","title":"Pre-requisites and preparation","text":"<p>Required tools to complete the tasks:</p> <ul> <li>A PC with Windows.</li> <li>Microsoft SQL Server: The free Express version is sufficient, or you may also use localdb installed with Visual Studio</li> <li>SQL Server Management Studio</li> <li>Database initialization script: adventure-works-2014-oltp-script.zip</li> <li>Microsoft Visual Studio 2019 (2022 does not work here): The free Community edition is sufficient</li> <li>Report Server Project support for Visual Studio: Microsoft Reporting Services Projects extension (Keep the extension up to date.)</li> <li>GitHub account and a git client</li> </ul> <p>Materials for preparing for this laboratory:</p> <ul> <li>Using Microsoft SQL Server: description and video</li> <li>SQL Reporting Services official tutorial</li> </ul>"},{"location":"Lab-ReportingServices/#initial-steps","title":"Initial steps","text":"<p>Keep in mind that you are expected to follow the submission process.</p>"},{"location":"Lab-ReportingServices/#create-and-check-out-your-git-repository","title":"Create and check out your Git repository","text":"<ol> <li> <p>Create your git repository using the invitation link in Moodle. Each lab has a different URL; make sure to use the right one!</p> </li> <li> <p>Wait for the repository creation to complete, then check out the repository.</p> <p>If you are not asked for credentials to log in to GitHub in university computer laboratories when checking out the repository, the operation may fail. This is likely due to the machine using someone else's GitHub credentials. Delete these credentials first (see here), then retry the checkout.</p> </li> <li> <p>Create a new branch with the name <code>solution</code> and work on this branch.</p> </li> <li> <p>Open the checked-out folder and type your Neptun code into the <code>neptun.txt</code> file. There should be a single line with the 6 characters of your Neptun code and nothing else in this file.</p> </li> </ol>"},{"location":"Lab-ReportingServices/#create-the-adventure-works-2014-database","title":"Create the Adventure Works 2014 database","text":"<p>We will work with the Adventure Works sample database. This database contains the operational information of a fictional retail company. Instead of understanding the database contents, we will use a few predefined queries that list product purchases.</p> <ol> <li> <p>Download adventure-works-2014-oltp-script.zip and extract it to folder <code>C:\\work\\Adventure Works 2014 OLTP Script</code> (create the folder if it does not exist yet).</p> <p>The folder name should be as above; otherwise, you need to change the path in the sql script:</p> <pre><code>-- NOTE: Change this path if you copied the script source to another path\n:setvar SqlSamplesSourceDataPath \"C:\\work\\Adventure Works 2014 OLTP Script\\\"\n</code></pre> <p>If you need to edit the path, make sure to keep the trailing slash!</p> </li> <li> <p>Connect to Microsoft SQL Server using SQL Server Management Studio. Use the following connection details.</p> <ul> <li>Server name: <code>(localdb)\\mssqllocaldb</code> when using LocalDB, or <code>localhost\\sqlexpress</code> when using SQL Express</li> <li>Authentication: <code>Windows authentication</code></li> </ul> </li> <li> <p>Use File / Open / File... to open <code>instawdb.sql</code> from the folder created above. Do not execute it yet! First, you should turn on SQLCMD mode: in the Query menu click SQLCMD Mode; then click Execute.</p> <p></p> </li> <li> <p>Verify whether the database and its contents are created. Select Databases in the Object explorer on the left and click Refresh. The AdventureWorks2014 database shall appear with a number of tables inside.</p> <p>.</p> </li> <li> <p>Open a new SQL Query window on this database (right-click the database and choose New query), and execute the following script with your own Neptun code substituted:</p> <pre><code>update Production.Product set Name='NEPTUN'+Name\n</code></pre> <p>Check the contents of the table <code>Production.Product</code> and verify if it has your Neptun code in the product names: right-click the table and choose Select top 1000 rows.</p> <p>IMPORTANT</p> <p>Your Neptun code must be listed in the names. You will need to create screenshots in the following exercises, and your Neptun code must appear on these images.</p> </li> </ol>"},{"location":"Lab-ReportingServices/#exercise-1-table-report","title":"Exercise 1: Table report","text":"<p>This exercise is solved together with the lab instructor.</p> <p>In the checked-out repository, locate file <code>reportserver.sln</code> and open it with Visual Studio. This is an empty Report Server project.</p> <p>The Report Server project consists mainly of Report Definition (.rdl) files, that define the data sources (queries) and a template, which, when rendered, produces the final result: a report. These reports can be installed to a Report Server and executed there, providing the users with up-to-date data.</p> <p>In this lab, we will not use the Report Server. This is mainly because the configuration would require administrative privileges that we do not have in the labs. Therefore, we will preview the reports in Visual Studio.</p>"},{"location":"Lab-ReportingServices/#create-the-first-report-definition-file","title":"Create the first Report Definition file","text":"<ol> <li> <p>In the Solution Explorer right-click Reports and choose Add &gt; New Item.</p> <p></p> </li> <li> <p>Choose the Report type from among the listed templates. Call it Sales Orders.rdl, then click Add.</p> If adding the new report file fails <p>In certain Visual Studio and Report Server project versions adding this new report file might fail. If this happens, follow these steps instead.</p> <ol> <li>Download this empty rdl file.</li> <li>Save the file with the correct name to the <code>reportserver</code> folder of your repository (this folder already exist).</li> <li>In Visual Studio right-click Reports then choose Add &gt; Existing Item, and browse for this file.</li> </ol> </li> <li> <p>Open the report file to get the Report Designer view. Here, the new .rdl file is displayed in the Design view.</p> <p></p> <p>This is our development view. The Report Designer has two views: Design and Preview. A panel called Report Data (on the left) is also opened. Here, we can define data sources. If the data sources are set, we can create the report on the Design tab and check how it would look like on the Preview tab.</p> </li> </ol>"},{"location":"Lab-ReportingServices/#configuring-the-data-source","title":"Configuring the data source","text":"<p>A data source defines where our data comes from. This will be the SQL Server database created before.</p> <ol> <li> <p>Using the Report Data pane, click New &gt; Data Source. The name shall be \"AdventureWorks2014\".</p> <p></p> </li> <li> <p>Choose Microsoft SQL Server as the connection type and click the button to the right of connection string to configure the database access</p> <ul> <li>Server name: <code>(localdb)\\mssqllocaldb</code></li> <li>Authentication: <code>Windows Authentication</code></li> <li>Select or enter database name: <code>AdventureWorks2014</code></li> </ul> </li> <li> <p>Click OK to close the dialog. Then re-open the Data Source settings from the Report Data panel by right-clicking on the newly created data source, opening its properties, and then going to the Credentials page. The following checkbox has to be checked:</p> <p></p> </li> </ol>"},{"location":"Lab-ReportingServices/#configuring-a-data-set","title":"Configuring a data set","text":"<p>The next step is the configuration of a dataset. Practically, this means executing a query in the database.</p> <ol> <li> <p>Using the Report Data pane, click New &gt; Data Set. Call the dataset \"AdventureWorksDataset\". Select the data source created before from the dropdown, then apply the following settings:</p> <p></p> </li> <li> <p>Copy the following query.</p> <pre><code>SELECT\nsoh.OrderDate AS [Date],\nsoh.SalesOrderNumber AS [Order],\npps.Name AS Subcat, pp.Name as Product,\nSUM(sd.OrderQty) AS Qty,\nSUM(sd.LineTotal) AS LineTotal\nFROM Sales.SalesPerson sp\nINNER JOIN Sales.SalesOrderHeader AS soh\nON sp.BusinessEntityID = soh.SalesPersonID\nINNER JOIN Sales.SalesOrderDetail AS sd\nON sd.SalesOrderID = soh.SalesOrderID\nINNER JOIN Production.Product AS pp\nON sd.ProductID = pp.ProductID\nINNER JOIN Production.ProductSubcategory AS pps\nON pp.ProductSubcategoryID = pps.ProductSubcategoryID\nINNER JOIN Production.ProductCategory AS ppc\nON ppc.ProductCategoryID = pps.ProductCategoryID\nGROUP BY ppc.Name, soh.OrderDate, soh.SalesOrderNumber,\npps.Name, pp.Name, soh.SalesPersonID\nHAVING ppc.Name = 'Clothing'\n</code></pre> <p>Click Refresh fields when ready.</p> <p>We have a Query Designer where the query can be created with visual aids. We will not use it, but it is available.</p> <p>Click OK to close the dialog.</p> </li> </ol>"},{"location":"Lab-ReportingServices/#table-report-5p","title":"Table report (5p)","text":"<p>Now that we have our connection to the database and the query that will supply the data, let us create a report. A report is basically data from the database displayed in a table or with diagrams.</p> <ol> <li> <p>Open the Toolbox pane. You can do this from the View menu.</p> </li> <li> <p>From the Toolbox choose Table and draw a table on the big, empty and white canvas on the Design tab:</p> <p></p> </li> <li> <p>Switch back to the Report Data pane and expand the AdventureWorksDataset:</p> <p></p> <p>If the node is empty or cannot be opened, you need to re-open the data set properties using right-click, then clicking the Refresh Fields button.</p> </li> <li> <p>Drag the Date field to the first column of the table. It should look like this:</p> <p></p> <p>The <code>[Date]</code> in the second row shows the expression to evaluate, while \"Date\" in the first row is the literal header label - we can change it too.</p> </li> <li> <p>Similarly, add Order and Product to the second and third columns. Add Qty as well: drag it to the right side of the last column; the cursor icon will change to + sign, and a blue line at the end of the table will appear. This will add a new fourth column. Add LineTotal similarly into the fifth column.</p> <p></p> </li> <li> <p>The first report is almost ready. Let us check how it looks like using the Preview tab. Note that it might take a while for it to open the first time. It will be faster the second time. Verify that your Neptun code appears in the table content! (If not, you forgot a preparation step. Go back, and repeat the steps!)</p> <p></p> <p>We can print or export the report into various formats (e.g., Word, Excel, PDF). However, this report is not very pretty, e.g., the currency is not displayed, and the Qty and date columns are not formatted, etc. </p> </li> <li> <p>Go back to Design tab, right-click the <code>[Date]</code> expression, and select Text Box Properties. Navigate to the Number page, select the Date category, and choose a date format you like.</p> <p></p> </li> <li> <p>Right-click <code>[LineTotal]</code>, use Text Box Properties again, and select the Currency option in Number.</p> <p></p> </li> <li> <p>By moving the mouse over the gray boxes at the top of the table header, the cursor changes to resize mode. (Just like you would resize a table in Word.) Use this to resize the entire table, and the columns (Qty and Line Total can be narrower, while the others might need more space).</p> <p>Finally, emphasize the header row. Select the whole row (by clicking the gray rectangle on the left end of the row) and click Bold on the ribbon.</p> <p></p> <p>If you check the preview, it should look like this:</p> <p></p> </li> </ol> <p>SUBMISSION</p> <p>If you are continuing with the next exercise, you may omit to create the screenshot here.</p> <p>Create a screenshot of the report preview page. Save the screenshot as <code>f1.png</code> and submit it with the other files of the solution. The screenshot shall include Visual Studio and the report preview. Verify that your Neptun code is visible!</p> <p>Upload the changed Visual Studio project and its corresponding files too.</p>"},{"location":"Lab-ReportingServices/#grouping-and-total-value-5p","title":"Grouping and total value (5p)","text":"<p>The report we created is very long, and it contains everything without structure. These are retail sales information: the amount of products sold each day. Let us group the data.</p> <ol> <li> <p>Go back to Design tab. Make sure that we see the Row Groups pane below the table. If it is not there, right-click the design area and select Grouping in the View menu.</p> </li> <li> <p>Drag the Date field from Report Data to the Row Groups pane above the (Details) row.</p> <p></p> <p>The table will look like this:</p> <p></p> </li> <li> <p>Drag field Order into Row Groups between Date and (Details).</p> <p></p> </li> <li> <p>Now there are duplicate columns in the table. Let us delete these. Select the rightmost Date and Order columns by clicking on the gray boxes above them. Delete them by right click and Delete Columns.</p> <p></p> <p>Unfortunately, the new Date column format is now lost, but you can set it again as previously.</p> <p>Check the Preview now, and see that the table is now ordered and grouped as we specified it.</p> <p></p> </li> <li> <p>Go back to the Design view. Right-click the <code>[LineTotal]</code> cell and click Add Total. This will add a total for each Order (which we used for grouping). There will be no label added to this line. Add one by left-clicking the cell and typing: \"Order Total\".</p> <p></p> </li> <li> <p>Holding the CTRL key pressed down, click Order Total, and the two cells to the right to select them all. Then set a background color by choosing one from the Format menu.</p> <p></p> </li> <li> <p>Check the preview of the report now.</p> <p></p> </li> <li> <p>Let us create a daily total as well!</p> <ul> <li>Go back to the Design view.</li> <li>Right-click on the <code>[Order]</code> cell and click Add Total &gt; After.</li> <li>A new cell (Total) appears below <code>[Order]</code>. Click in it and change the label to \"Daily Total\".</li> <li>Select the cell and the three right next to it (e.g., by using CTRL and clicking them) and change their background color (Format &gt; Background color).</li> </ul> </li> <li> <p>Since there are quite a few orders per day, you may need to scroll down 4-5 pages to check the result in the preview:</p> </li> </ol> <p></p> <p>SUBMISSION</p> <p>Create a screenshot of the report preview page. Save the screenshot as <code>f1.png</code> and submit it with the other files of the solution. The screenshot shall include Visual Studio and the report preview, including the lines showing the totals (a turn a few pages if needed to see one). Verify that your Neptun code is visible!</p> <p>Upload the changed Visual Studio project and its corresponding files too.</p>"},{"location":"Lab-ReportingServices/#exercise-2-visualization","title":"Exercise 2: Visualization","text":"<p>This exercise is to be completed individually for 5 points.</p> <p>The table report shows all sales. That is not useful to get a quick overview. A diagram would be more helpful. Create a diagram that displays the sales per category.</p>"},{"location":"Lab-ReportingServices/#inserting-a-diagram","title":"Inserting a diagram","text":"<ol> <li> <p>Switch to Design tab and drag a Chart from the Toolbox to the canvas to the table's right side.  You might have to wait a while for the diagram wizard to open. Choose a column diagram.</p> </li> <li> <p>Drag LineTotal from the Report Data pane to the diagram. Do not release the left mouse button. A window will appear beside the diagram. The window is titled Chart Data. Go to the \"\u2211values\" field with your mouse. Release the left mouse button now.</p> <p></p> <p>This makes the totals be displayed on the vertical axis.</p> </li> <li> <p>Next, drag Subcat field into Category Groups and Date into Series Groups.</p> <p></p> <p>The horizontal axis displays the categories, and we get separate columns per date series.</p> </li> <li> <p>Right, click label <code>[Date]</code> and select Series Groups Properties. Click on the fx button in Group Expressions.</p> <p></p> <p>The following expression: <code>=Year(Fields!Date.Value)</code></p> <p></p> <p>This will produce a yearly breakdown per category.</p> </li> <li> <p>Press OK in both windows. Before checking the Preview, increase the height of the chart; otherwise, the labels at the bottom will remain hidden:</p> <p></p> </li> <li> <p>Check the preview now: it shows the sales per category for each year separately.</p> <p></p> </li> </ol>"},{"location":"Lab-ReportingServices/#format-the-diagram","title":"Format the diagram","text":"<p>There are a few changes to make.</p> <ol> <li> <p>Click Chart title and replace the title: \"Revenue by category NEPTUN\" with your own Neptun code.</p> </li> <li> <p>Right-click <code>&lt;&lt;Expr&gt;&gt;</code> in Series Groups and choose Series Groups Properties. Click on the fx button next to Label. Type: <code>=Year(Fields!Date.Value)</code>. Now the label will be the year part of the date.</p> </li> <li> <p>Right-click the vertical axis and select Vertical Axis Properties.</p> <p></p> <p>Select Currency from the Number group and fill out as previously:</p> <p></p> </li> <li> <p>Check the preview now: the diagram will look much better (and also has your Neptun code):</p> <p></p> </li> </ol> <p>SUBMISSION</p> <p>Create a screenshot of the report preview page. Save the screenshot as <code>f2.png</code> and submit it with the other files of the solution. The screenshot shall include Visual Studio and the report preview. Verify that your Neptun code is visible in the diagram title!</p> <p>Upload the changed Visual Studio project and its corresponding files too.</p>"},{"location":"Lab-ReportingServices/#exercise-3-sales-personnel-report","title":"Exercise 3: Sales personnel report","text":"<p>This exercise is to be completed individually for 5 points.</p> <p>Let us create a new report about the effectiveness of the sales personnel.</p>"},{"location":"Lab-ReportingServices/#extending-the-data-set","title":"Extending the data set","text":"<p>The dataset we created in the Report Data panel has to be extended with further information.</p> <ol> <li> <p>Open the data set properties by right-clicking on AdventureWorksDataSet in the Report Data pane, click Dataset properties then change the SQL command to:</p> <pre><code>SELECT\nsoh.OrderDate AS [Date],\nsoh.SalesOrderNumber AS [Order],\npps.Name AS Subcat, pp.Name as Product,\nSUM(sd.OrderQty) AS Qty,\nSUM(sd.LineTotal) AS LineTotal\n, CONCAT(pepe.FirstName, ' ', pepe.LastName) AS SalesPersonName\nFROM Sales.SalesPerson sp\nINNER JOIN Person.Person as pepe ON sp.BusinessEntityID = pepe.BusinessEntityID\nINNER JOIN Sales.SalesOrderHeader AS soh ON sp.BusinessEntityID = soh.SalesPersonID\nINNER JOIN Sales.SalesOrderDetail AS sd ON sd.SalesOrderID = soh.SalesOrderID\nINNER JOIN Production.Product AS pp ON sd.ProductID = pp.ProductID\nINNER JOIN Production.ProductSubcategory AS pps ON pp.ProductSubcategoryID = pps.ProductSubcategoryID\nINNER JOIN Production.ProductCategory AS ppc ON ppc.ProductCategoryID = pps.ProductCategoryID\nGROUP BY ppc.Name, soh.OrderDate, soh.SalesOrderNumber,\npps.Name, pp.Name, soh.SalesPersonID\n, pepe.FirstName, pepe.LastName\nHAVING ppc.Name = 'Clothing'\n</code></pre> <p>Don't forget to press Refresh fields before closing the dialog.  Close the dialog.</p> </li> <li> <p>In the Report data expand AdventureWorksDataset (if already expanded, close then re-expand). A new field SalesPersonName will appear.</p> </li> <li> <p>Right-click the data source AdventureWorks2014 and choose Convert to shared Data Source, and then repeat this with the AdventureWorksDataSet too. These will enable us to use them in a new report.</p> </li> </ol>"},{"location":"Lab-ReportingServices/#new-report-and-data-sources","title":"New report and data sources","text":"<p>We will use the converted and shared data source and data set in a new report.</p> <ol> <li> <p>In the Solution Explorer right-click Reports and choose Add &gt; New Item &gt; Report. The name of this new report should be \"Sales People\".</p> </li> <li> <p>Open the new report. There are no data sources associated with the report. Use the Report Data pane to add the existing one:</p> <ul> <li> <p>Right-click Data Source and choose Add Data Source</p> </li> <li> <p>Click the Use shared data source reference option and select \"AdventureWorks2014\".</p> <p></p> </li> <li> <p>Right lick Datasets &gt; Add Dataset</p> </li> <li> <p>Click Use a shared dataset and select the existing AdventureWorksDataset</p> <p></p> </li> </ul> </li> </ol>"},{"location":"Lab-ReportingServices/#contents-of-the-report","title":"Contents of the report","text":"<p>Create a tabular report containing the sales persons and their activity. Group by product category and sales person. Add a total line for each person. Make sure to set appropriate formatting of numbers.</p> <p>The key is creating the table and grouping as below. The category is the field Subcat.</p> <p></p> <p>The final report should look like this:</p> <p></p> <p>Tip</p> <p>You should use the Add total &gt; After just like before. But you should do this by clicking on <code>[Subcat]</code> and not<code>[SalesPersonName]</code>! (If you click SalesPersonName to add the total, it will be a \"grand total\" adding up all persons.)</p> <p>SUBMISSION</p> <p>Create a screenshot of the report preview page. Save the screenshot as <code>f3.png</code> and submit it with the other files of the solution. The screenshot shall include Visual Studio and the report preview. Verify that your Neptun code is visible in the table!</p> <p>Upload the changed Visual Studio project and its corresponding files too.</p>"},{"location":"Lab-ReportingServices/#exercise-4-optional-exercise","title":"Exercise 4: Optional exercise","text":"<p>You can earn an additional +3 points with the completion of this exercise.</p> <p>Create a pie chart to compare the sales persons' performance according to the total value of purchases achieved by them!  Put your Neptun code into the pie chart title! The goal is to get a diagram similar to the one below.</p> <p></p> <p>Tip</p> <p>The pie chart is similar to the column diagram. The \u2211 Values should be the LineTotal, and Category Groups is the SalesPersonName. (Series Groups will remain empty this time.)</p> <p>Make sure that the legend shows the names. You might need to adjust the size of the diagram to have enough space.</p> <p></p> <p>SUBMISSION</p> <p>Create a screenshot of the report preview page. Save the screenshot as <code>f4.png</code> and submit it with the other files of the solution. The screenshot shall include Visual Studio and the report preview. Verify that your Neptun code is visible in the diagram title!</p> <p>Upload the changed Visual Studio project and its corresponding files too.</p>"}]}